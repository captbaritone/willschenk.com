<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on Will Schenk</title><link>https://willschenk.com/tags/javascript/</link><description>Recent content in javascript on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 08 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/javascript/feed.xml" rel="self" type="application/rss+xml"/><item><title>NextJS with Prisma on Kubernetes</title><link>https://willschenk.com/articles/2021/next_js_with_prisma/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/next_js_with_prisma/</guid><description>Now that we have our cluster up and running, lets look at how to build and deploy a NextJS app on it, including the database. Create a NextJS app We&amp;#39;ll scaffold out a TypeScript app. npx create-next-app@latest --typescript myapp cd myapp npm run dev Fireup a local data docker run -e POSTGRES_PASSWORD=awesome_password -p 5432:5432 postgres Install prisma We&amp;#39;ll add the npm packages to our project.</description></item><item><title>Logging with an HTTP Proxy</title><link>https://willschenk.com/articles/2021/logging_with_an_http_proxy/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/logging_with_an_http_proxy/</guid><description>I miss having Chrome dev tools when writing node applications, since I often want to see what exactly the network traffic. Here&amp;#39;s a way to easily setup a man in the middle proxy to look at all the traffic your application is generating. Run the docker instance First we first up the proxy with the web interface: docker run --rm -it -p 8080:8080 -p 8081:8081 mitmproxy/mitmproxy mitmweb --web-host 0.</description></item><item><title>Developing React Inside Docker</title><link>https://willschenk.com/articles/2020/developing_react_inside_docker/</link><pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/developing_react_inside_docker/</guid><description>Can we build a node application without installing node locally? We sure can! Lets walk through the process.
First make sure that docker is installed. This is handy if you are working on a remote server for example.
Bootstrap Then lets start building out the Dockerfile that we will use.
mkdir testapp cd testapp Create a Dockerfile.initial that has node:14 in it. Start up the container with Dockerfile.initial FROMnode:14WORKDIR/appCMD bash</description></item><item><title>Simple CORS workaround for local development</title><link>https://willschenk.com/articles/2020/simple_cors_workaround_for_local_development/</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/simple_cors_workaround_for_local_development/</guid><description>I&amp;#39;ve been doing a lot of web development old school, just editing HTML and JavaScript by hand without a build environment. Running npx live-server is an easy one liner to spin up a server, that opens a browser for you and also updates changes on safe. Sometimes that&amp;#39;s not enough. Often you want to pull in data from an API, and that requires HTTPS, and also you need to work around CORS limitations.</description></item><item><title>Beginning Emacs</title><link>https://willschenk.com/articles/2020/beginning_emacs/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/beginning_emacs/</guid><description>Intro I&amp;#39;ve been dipping back ito the world of free software, and have been having a huge amount of fun getting back into emacs. I&amp;#39;m using it more of an operating system than I ever did before, as a way to navigate the world using a text interface. I&amp;#39;d never thought I&amp;#39;d be done with the terminal, but this is the first time that I&amp;#39;ve got something better and more powerful.</description></item><item><title>Playing with deno</title><link>https://willschenk.com/articles/2020/deno/</link><pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/deno/</guid><description>Deno is a new V8 based TypeScript and JavaScript programming language that works like a command line web browser. It was written by the creaters of NodeJS and seeks to fix some of the issues with Node around it&amp;rsquo;s security model and pacakge management. Lets look at building a simple webservice using redis.
Install deno If you are in OSX you can use homebrew or install from a shell installer:</description></item><item><title>Bootstrapping a react app</title><link>https://willschenk.com/articles/2019/bootstrapping_a_react_app_with_bootstrap/</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/bootstrapping_a_react_app_with_bootstrap/</guid><description>&lt;p>Here&amp;rsquo;s a quick recipe for getting a blank react project with bootstrap up and running. We&amp;rsquo;ll walk
though all of the steps that you&amp;rsquo;ll need to get a basic bootstrap based framework up and running,
ready for theming and component implementation using redux.&lt;/p></description></item><item><title>Image Manipulation in Firebase</title><link>https://willschenk.com/articles/2018/image_manipulation_in_firebase/</link><pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/image_manipulation_in_firebase/</guid><description>We can manipulate images using JavaScript directly, which can be run both on the server or browser environment. Lets take a look at how we&amp;rsquo;d do this using create-react-app and firebase. We will deploy a function on firebase that will download the user&amp;rsquo;s avatar, manipulate the image and overlay it with a mask, and then spit out an image.
Project Setup First make sure that you have nvm installed. We&amp;rsquo;ll need a different version of node for create-react-app then we will for firebase functions.</description></item><item><title>Bower with Rails</title><link>https://willschenk.com/articles/2015/bower-with-rails/</link><pubDate>Sat, 25 Jul 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/bower-with-rails/</guid><description>Let&amp;rsquo;s look at how we can integrate bower with rails and Sprockets. Bower is one of the two major javascript package managers, the other being the Node Package Manager, or npm. The biggest difference between the two is how the javascript is packaged up. Bower is the more straightforward of the two, and it mainly a way to distribute javascript and keep things up to date.
Install Bower The first step is to install bower.</description></item></channel></rss>