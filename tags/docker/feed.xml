<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on Will Schenk</title><link>https://willschenk.com/tags/docker/</link><description>Recent content in docker on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/docker/feed.xml" rel="self" type="application/rss+xml"/><item><title>K8 Dashboard on Docker Desktop</title><link>https://willschenk.com/articles/2021/k8_dashboard_on_docker_desktop/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/k8_dashboard_on_docker_desktop/</guid><description>Pretty easy to setup, but here are the steps. Docker Desktop To easily get going on a local Mac, you can install the compoents using homebrew. brew install --cask docker brew install kubernetes-cli brew install kn Start up Docker, and then turn on kubernetes and make sure that you have a running node. kubectl get nodes NAME STATUS ROLES AGE VERSION docker-desktop Ready control-plane,master 5h59m v1.</description></item><item><title>Controlling docker in golang</title><link>https://willschenk.com/articles/2021/controlling_docker_in_golang/</link><pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/controlling_docker_in_golang/</guid><description>I&amp;#39;ve been thinking about running different ephemeral jobs with attached volumes, volumes that I could garbage collect as needed. This is a non-standard way of using docker, but I wanted to look to see how I could interact with the docker daemon programatically. The use case is: Create a docker volume for a container Start up a docker container, with a specified environment Monitor the running of the container, kill if its running for too long Capture the output of the container Clean up the container Pull data from the volume Clean up the volume Setting up go environemnt First we need to setup a go project and create the go.</description></item><item><title>Uploading Blobs</title><link>https://willschenk.com/articles/2021/uploading_blobs/</link><pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/uploading_blobs/</guid><description>I want a simple service I can deploy that lets me store blobs. I want it to return the hash of the stored object which I will use to load it again. First we will write a simple go service that will do everything in memory, and then we will build a nginx config that has the webserver stream it to disk, so we don&amp;#39;t have a lot of memory being used.</description></item><item><title>Docker One Liners</title><link>https://willschenk.com/articles/2021/docker_one_liners/</link><pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/docker_one_liners/</guid><description>I use docker in my workflow as an application and environment manager. I switch between multiple physical computers a lot, and like to have things self contained within work spaces that I can move from one computer to another easily, normally using `git`. Here are a few tricks that I use to have the lightest touch on my local installation as possible. Orientation If you want to install a specific set of software, you use a `Dockerfile` to create an `image`.</description></item><item><title>Rails in Docker</title><link>https://willschenk.com/articles/2020/rails_in_docker/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/rails_in_docker/</guid><description>In leveraging disposability for exploration we looked at how to build software without having it installed on your local computer. Lets go through how to setup and develop a rails application with this process. docker-compose.yml all the way down We&amp;#39;re going to create our app by adding things to a docker-compose.yml file as needed. Lets create the first one, which will contain our rails container as well as a volume for keeping track of all the gems.</description></item><item><title>Developing React Inside Docker</title><link>https://willschenk.com/articles/2020/developing_react_inside_docker/</link><pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/developing_react_inside_docker/</guid><description>Can we build a node application without installing node locally? We sure can! Lets walk through the process.
First make sure that docker is installed. This is handy if you are working on a remote server for example.
Bootstrap Then lets start building out the Dockerfile that we will use.
mkdir testapp cd testapp Create a Dockerfile.initial that has node:14 in it. Start up the container with Dockerfile.initial FROMnode:14WORKDIR/appCMD bash</description></item><item><title>Emacs Tramp tricks</title><link>https://willschenk.com/articles/2020/tramp_tricks/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/tramp_tricks/</guid><description>Emacs is amazing. It&amp;rsquo;s a very different sort of thing than a code text editor like Vim or an IDE like VSCode. It&amp;rsquo;s a different way of thinking of how to interact with a computer, where you build up techniques on top of simple tricks that let you get amazing things done. Of course, part of the appeal/challenge is that you need to figure out how to make it work yourself.</description></item><item><title>Leveraging disposability for exploration</title><link>https://willschenk.com/articles/2020/leveraging_disposability_for_exploration/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/leveraging_disposability_for_exploration/</guid><description>I play around with a lot of technology to see what&amp;rsquo;s out there and keep myself current, especially trying to find simpler ways to do our work. One of the issues is that this can leave lots of stuff laying which can be messy. Here are some techniques I use to keep things under control.
There are two complementary principle&amp;rsquo;s that I focus on. One is reproducibility, and the other is disposibility.</description></item><item><title>Setting up an IPFS Node</title><link>https://willschenk.com/articles/2019/setting_up_an_ipfs_node/</link><pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/setting_up_an_ipfs_node/</guid><description>IPFS nodes that run in the broswer communicate over websockets to the main network. Lets walk through how to setup a IPFS server that your browser code can connect to in addition to the public gateways. Strategy Wire everything up with docker-compose Create and configure an ipfs container Setup nginx with dummy certificate Replace that certificate with certbot Setup certbot to auto renew the certificates Requirements You will need: A server with a domain or subdomain to use certbot to get a certificate A working docker-compose install I&amp;#39;m using a prebuilt docker image on Digital Ocean but the key part is to get the domain name.</description></item><item><title>Installing guix on IntelNUC</title><link>https://willschenk.com/articles/2019/installing_guix_on_nuc/</link><pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/installing_guix_on_nuc/</guid><description>I&amp;rsquo;ve been getting into Guix and Emacs lately, going back to my Free Software roots. It&amp;rsquo;s amazing. Guix is a functional package manager that you can use on top of a linux distribution to have repeatable and rollbackable builds. Guix System is a distrubution that&amp;rsquo;s Guix all the way down.
I have an Intel NUC lying around that I wanted to use, so this is my effort to get a working Guix System installation on it.</description></item><item><title>Building a slimmer go Docker container</title><link>https://willschenk.com/articles/2019/building_a_slimmer_go_docker_container/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/building_a_slimmer_go_docker_container/</guid><description>&lt;p>Go binaries are self contained, which means that they don&amp;rsquo;t need anything special installed in the environment to deploy them. When people make &lt;code>Dockerfiles&lt;/code> to build go projects, they often include the the golang compilers and build tools, which isn&amp;rsquo;t necessary for running the container. I&amp;rsquo;m going to use &lt;a href="https://github.com/somarat/healer">healer&lt;/a> Docker container that &amp;ldquo;Automatically heal docker containers that report themselves unhealthy&amp;rdquo; as an example of reducing the image size from 648MB to 17MB.&lt;/p></description></item><item><title>Setting up a chromebook for development</title><link>https://willschenk.com/articles/2019/setting_up_chromebook/</link><pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/setting_up_chromebook/</guid><description>&lt;p>I just switch my pixelbook back to the stable channel, and this is what I did to get back to developing on it.&lt;/p></description></item></channel></rss>