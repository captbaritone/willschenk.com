<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ruby on Will Schenk</title><link>https://willschenk.com/tags/ruby/</link><description>Recent content in ruby on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 22 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/ruby/feed.xml" rel="self" type="application/rss+xml"/><item><title>Uploading to S3 on the command line</title><link>https://willschenk.com/articles/2021/uploading_to_s3_on_the_command_line/</link><pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/uploading_to_s3_on_the_command_line/</guid><description>I want to store data from a shell scripts on a S3 compatible bucket from with in a docker container. I&amp;#39;m going to be doing this on digital ocean, but I assume that any API compatible service would work. Setup spaces in digital ocean I&amp;#39;m going to be using digital ocean for these tests, and I setup my bucket with the following terraform snippet. resource &amp;#34;digitalocean_spaces_bucket&amp;#34; &amp;#34;gratitude-public&amp;#34; { name = &amp;#34;gratitude-public&amp;#34; region = &amp;#34;nyc3&amp;#34; cors_rule { allowed_headers = [&amp;#34;*&amp;#34;] allowed_methods = [&amp;#34;GET&amp;#34;] allowed_origins = [&amp;#34;*&amp;#34;] max_age_seconds = 3000 } } Environment Variables AWS_ACCESS_KEY_ID spaces id AWS_SECRET_ACCESS_KEY access key AWS_END_POINT nyc3.</description></item><item><title>Looking at Gemfiles</title><link>https://willschenk.com/articles/2020/looking_at_gemfiles/</link><pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/looking_at_gemfiles/</guid><description>Bundler is the standard way for Ruby projects to specifiy dependencies. Let&amp;#39;s take a look at how that works, reimplement bundle outdated, and be able to see the changes that took place between the build you are using and the latest one. Ruby ecosystem: Rubygems, Bundler, Gemfile, Gemfile.lock rubygems is the overall ecosystem, which includes the main rubygems.org database of shared packages, and how they depend upon each other.</description></item><item><title>Checking health of RSS feeds</title><link>https://willschenk.com/articles/2020/checking_rss_health/</link><pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/checking_rss_health/</guid><description>I still use RSS feeds as my main way of consuming stuff on the internet. Old school. I was looking at the list of things that I&amp;#39;ve subscribed to which has been imported back from the Google Reader days, and figured I&amp;#39;d do some exploration of ye old OPML file. Setup the Gemfile We&amp;#39;ll need to pull in a few gems here: source &amp;#39;https://rubygems.org&amp;#39; gem &amp;#39;httparty&amp;#39; # To pull stuff from the network gem &amp;#39;feedjira&amp;#39; # To parse RSS feeds gem &amp;#39;nokogiri&amp;#39; # To parse XML gem &amp;#39;domainator&amp;#39; # To figured out the domain from the hostname gem &amp;#39;whois&amp;#39; # To see how old the domain is gem &amp;#39;whois-parser&amp;#39; # To actually make sense of the result And install everything bundle Look at domains First, lets see what we can find out about the machine that hosts the feed.</description></item><item><title>Receiving posted JSON with Sinatra</title><link>https://willschenk.com/articles/2015/receiving-posted-json-with-sinatra/</link><pubDate>Mon, 27 Jul 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/receiving-posted-json-with-sinatra/</guid><description>Here&amp;rsquo;s some simple code to accept a JSON string posted to a Sinatra end point rather than a form. I switched from using jQueries $.ajax method to superagent as part of my exploration of the node javascript package universe, and it has a different way of serializing nest objects when posting as a form. Specifically, it doesn&amp;rsquo;t.
I needed something that could do both.
Code to use form encoding or JSON blob This first tries and loads the parameters using the normal form encoding methods.</description></item><item><title>Adding search to a middleman blog</title><link>https://willschenk.com/articles/2015/adding-search-to-a-middleman-blog/</link><pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/adding-search-to-a-middleman-blog/</guid><description>We&amp;rsquo;re going to build a simple, niave search for middleman blogs. We&amp;rsquo;re going to build a search index at build time, and then use that index to perform the search itself on the client side.
Building the index When you typed in something in google, it doesn&amp;rsquo;t then go and hit every page on the internet to check to see if there&amp;rsquo;s a match. It doesn&amp;rsquo;t even look at every page that it has squirreled away somewhere in the googleplex.</description></item><item><title>Slow data and Fast Sites</title><link>https://willschenk.com/articles/2015/slow-data-and-fast-sites/</link><pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/slow-data-and-fast-sites/</guid><description>This article walks through the motivations driving and benefits of using a the Seed Architecture for building performant websites using Middleman, React, and a seperate API server such as Parse. The benefits are:
You get full SEO with a heavy client JavaScript site without having to do crazy things with PhantomJS or meta fragments. Hosting and operations become both cheap and doesn&amp;rsquo;t require a support team. Scaling out the system is mainly a bandwidth problem, and secondarily a API scaling problem for a subset of behavior.</description></item><item><title>Setting up Rails testing with rspec, devise, and the gang</title><link>https://willschenk.com/articles/2015/setting-up-testing/</link><pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/setting-up-testing/</guid><description>The goal is to get features out fast, and iterate on them quickly. Does anyone care about it? What do they care about? How do we make it better?
As projects get bigger, both in terms of people using the site as well as people working on the site, testing and quality become relatively more important. Adding tests introduces drag, and the theory is that you invest now for payoffs later.</description></item><item><title>Setting up Devise with Twitter and Facebook and other Omniauth schemes without email addresses</title><link>https://willschenk.com/articles/2015/setting-up-devise-with-twitter-and-facebook-and-other-omniauth-schemes-without-email-addresses/</link><pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/setting-up-devise-with-twitter-and-facebook-and-other-omniauth-schemes-without-email-addresses/</guid><description>Adding social login to your sites really makes it easier to get users onboard. Devise is great to help get an authentication system up and running, but there are a few tricky things to get right. The first challenge is that you don&amp;rsquo;t always get the user&amp;rsquo;s email address when the first connect. The second challenge is that we want to request the minimum permissions first so that the user is more likely to sign up, and gradually ask more as the time arises.</description></item><item><title>Using rake for dataflow programming and data science</title><link>https://willschenk.com/articles/2014/using-rake-for-dataflow-programming-and-data-science/</link><pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/using-rake-for-dataflow-programming-and-data-science/</guid><description>I&amp;rsquo;ve been using Rake more and more for data collection and processing tasks. Rake is pretty pretty powerful. Most people know it as way to add external tasks to a Rails app, but it&amp;rsquo;s actually very powerful build system. We&amp;rsquo;re going to take advantage of that to build out a framework that will make it easy to collect, process, and interpret data while keeping it all in sync.
In fact, if you just want to start playing with stuff now, head over to the rake-data site to go through some walk throughs.</description></item><item><title>Building Middleman Extensions</title><link>https://willschenk.com/articles/2014/building-middleman-extensions/</link><pubDate>Wed, 17 Dec 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/building-middleman-extensions/</guid><description>Middleman extensions, like rails plugins, are packaged as gems. There are three main ways to extend middleman. You can add helpers, add middleman commands, or extend the sitemap generation in someway. Lets go through those in detail.
Creating the extension Create a gem using bundle gem _name_
$ bundle gem middleman-graphviz Add middleman-core to your gem dependancies in the .gemspec file:
spec.add_runtime_dependency &amp;#39;middleman-core&amp;#39;, [&amp;#39;&amp;gt;= 3.0.0&amp;#39;] Register your extension into middleman. Our gem will be activated in the sites config.</description></item><item><title>Middleman Tricks and Hacks</title><link>https://willschenk.com/articles/2014/middleman-tricks-and-hacks/</link><pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/middleman-tricks-and-hacks/</guid><description>As part of the process of getting this site to work, I learned some more things about how to better build a site with middleman. Building off of our foundational article here are a few other things that I found very useful when using middleman to build a static site with a bunch of dynamically generated content.
Partials The index.html.haml, articles.html.haml, tag.html.haml and calendar.html.haml pages all use the same partial to list out the post archives, which are mostly the same.</description></item><item><title>Dateslice: Writing rails extensions</title><link>https://willschenk.com/articles/2014/dateslice-writing-rails-extensions/</link><pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/dateslice-writing-rails-extensions/</guid><description>Ruby on Rails is a very modular framework since the merging with Merb in 2008. The opinionated conventions are implemented under using techniques that let you jump in and build your own components, picking and choosing different parts that let you build Rails apps in the same straightforward way you would if using the official modules.
Let&amp;rsquo;s go through the dateslices gem which I wrote to extend active record so that we could better interact with the group by sql command when dealing with dates.</description></item><item><title>Pulling data out of Google Analytics</title><link>https://willschenk.com/articles/2014/pulling-data-out-of-google-analytics/</link><pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/pulling-data-out-of-google-analytics/</guid><description>I like staring at the real time stats of Google Analytics. As a dashboard, it&amp;rsquo;s not really as amazing as Chartbeat is, and it doesn&amp;rsquo;t let you drill down into the data as much as Mixpanel. But GA is super simple to setup and it&amp;rsquo;s Google, so everyone uses it.
Another obsessive/fun thing to do is to see where that spike in inbound traffic is coming from. On HappyFunCorp there are days where we get a sudden influx of Happy Thoughts which warms our hearts and floods our inboxes.</description></item><item><title>New HappySeed released</title><link>https://willschenk.com/articles/2014/new-happyseed-released/</link><pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/new-happyseed-released/</guid><description>Make apps faster Head on over to the HappySeed website to get the latest version of HappyFunCorp&amp;rsquo;s starter application toolkit.
HappySeed is a set of application templates to help you get started building out new sites. The main section is a rails application template plus a set of rails generators to help you get started with rails appliations quickly. These generators setup the configuration of the application in a standard way, and the full set of generators include many things for setting up a modern rails app and well as middleman apps.</description></item><item><title>Building Sites with Middleman</title><link>https://willschenk.com/articles/2014/building-sites-with-middleman/</link><pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/building-sites-with-middleman/</guid><description>I make a lot of websites, and I have a certain toolkit that I use to build them. The most useful things I use are:
layouts and partials so I only need to set things up once haml for writing html, since I don&amp;rsquo;t like closing tags Bootstrap and sass for writing css Markdown for formatting large blogs of content coffeescript for JavaScript Middleman is a static site generator, which means that it takes a bunch of source files, does some stuff with it, and produces static HTML, CSS, Images, and Javascript that can be hosted on a basic server somewhere, including hosting on S3 or Github Pages so you don&amp;rsquo;t need to consider a server.</description></item><item><title>Scripting Twitter: Collecting Data and Writing Bots</title><link>https://willschenk.com/articles/2014/scripting-twitter/</link><pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/scripting-twitter/</guid><description>Lets build on our command line url exploring tool to look at how we can interact with Twitter. We are going to cover how to make a script that will pull information out of twitter, how to deal with its rate limiting, and how to interact with users on Twitter itself.
Twitter uses OAuth 1.0A as a way to authenticate requests. As a script writer, this is super annoying, because you can&amp;rsquo;t just stick a username and password in the environment and go from there.</description></item><item><title>Personal information from only a URL</title><link>https://willschenk.com/articles/2014/personal-information-from-only-a-url/</link><pubDate>Fri, 14 Nov 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/personal-information-from-only-a-url/</guid><description>Ever wonder what you can find out by looking at a url? How about physical addresses, server location, emails, phone numbers, various links to other profiles (which can in turn be structurally scraped), technology stack, and more.
$ socialinvestigator net page http://willschenk.com/bio domain: willschenk.com created_on: 2014-10-31 expires_on: 2015-10-31 updated_on: 2014-10-31 registrar_name: ENOM, INC. registrar_url: www.enom.com registrant_contact: name: WILL SCHENK organization: HAPPYFUNCORP address: 18 BRIDGE STREET, 2E city: BROOKLYN zip: 11201 state: NY country_code: US phone: +91.</description></item><item><title>Making a command line utility with gems and thor</title><link>https://willschenk.com/articles/2014/making-a-command-line-utility-with-gems-and-thor/</link><pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/making-a-command-line-utility-with-gems-and-thor/</guid><description>Some scripts work well because they are self contained and don&amp;rsquo;t have a lot of dependancies, like the hosts on your network tracker.
Others scripts
have more code than fits into a single file multiple options and switches have an extensive set of dependancies And on those cases, its better to make a gem and use thor
Hammer of the Gods Lets figure out how to make some command line tools and package them up so that they can be shared and used by other people.</description></item><item><title>How to track your coworkers</title><link>https://willschenk.com/articles/2014/how-to-track-your-coworkers/</link><pubDate>Fri, 31 Oct 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/how-to-track-your-coworkers/</guid><description>How much information do you bleed?
Ever wonder who is else is using your network? Or,who has actually showed up at the office?
Networking primer The simplest thing we can do to make this work is to check to see which devices have registered themselves on the network. As devices come and go, they connect automatically, so we will have a pretty good idea if people are there or not. Phones seem to attach and detach quite frequency, probably to conserve battery, so if we are want to answer the question &amp;ldquo;is so-and-so in the office&amp;rdquo; we&amp;rsquo;ll need to add additional logic to determine how far spaced the &amp;ldquo;sighting&amp;rdquo; events are to mean that the person has left the office, rather than the phone has gone to sleep.</description></item></channel></rss>