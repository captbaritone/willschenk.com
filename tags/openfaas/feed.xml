<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>openfaas, on Will Schenk</title><link>https://willschenk.com/tags/openfaas/</link><description>Recent content in openfaas, on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/openfaas/feed.xml" rel="self" type="application/rss+xml"/><item><title>Deploying OpenFaaS on Digital Ocean with Terraform</title><link>https://willschenk.com/articles/2021/deploying_open_faa_s_on_digital_ocean_with_terraform/</link><pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/deploying_open_faa_s_on_digital_ocean_with_terraform/</guid><description>We are going to look at how to use Terraform to deploy a Kubernetes cluster on Digital Ocean, add a managed postgres database, and redis and OpenFaaS in kubernetes. This will show how to use Terraform to manage the configuration and how we can access both cloud and kubernetes managed services from OpenFaaS functions. We are going to use the digitalocean, kubernetes, and helm terraform providers. The plan Provision a digitalocean_kubernetes_cluster Provision a digitalocean_database_cluster Provision 2 kubernetes_namespace for openfaas and openfaas-fn Provision a helm_release for openfaas Provision a helm_release for redis Provision 2 kubernetes_secret to point to the databases Deploy an OpenFaaS function that reads those secrets and talks to the database.</description></item><item><title>Setting up redis and nat-connector with FaasD</title><link>https://willschenk.com/articles/2021/setting_up_services_with_faasd/</link><pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/setting_up_services_with_faasd/</guid><description>Lets look at how we expand our faasd server to include a couple of services. We&amp;#39;ll first add a redis server and some simple ruby code to add a counter, and then we&amp;#39;ll build and add the nats-connector to be able publish and subscribe to events. About /var/lib/faasd/docker-compose.yaml This looks like a docker-compose file, and I believe that it actually does use the same code that parses the file of that name, but it doesn&amp;#39;t use docker to set up the containers.</description></item><item><title>Building static OpenFaas templates</title><link>https://willschenk.com/articles/2021/building_an_openfaas_template/</link><pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/building_an_openfaas_template/</guid><description>I&amp;#39;ve been playing with OpenFaaS recently and it&amp;#39;s a very accessable way to starting building cloud first services. I wanted to see what I could cram in there, so I built a few templates that would let me host a static site. One that is just html, and another than can be built with something like create-react-app. Static Create the template directory: mkdir -p template/static Then add a template/static/template.</description></item><item><title>Installing faasd</title><link>https://willschenk.com/articles/2021/installing_faasd/</link><pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/installing_faasd/</guid><description>Recently I came across an article on faasd, and I thought I&amp;#39;d give it a try and see how easy it is to use. Server templating is an easy way to create a server with DNS, and following the whole disposability principals, we&amp;#39;ll whip something up and see how it goes. What is faasd? Functions as a service are a way to easily package up simple functions as an API, with a minimal amount of overhead.</description></item></channel></rss>