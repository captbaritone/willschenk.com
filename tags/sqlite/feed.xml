<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sqlite on Will Schenk</title><link>https://willschenk.com/tags/sqlite/</link><description>Recent content in sqlite on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 15 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/sqlite/feed.xml" rel="self" type="application/rss+xml"/><item><title>SQLite in the browser</title><link>https://willschenk.com/articles/2021/sq_lite_in_the_browser/</link><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/sq_lite_in_the_browser/</guid><description>I&amp;#39;m getting more interested in SQLite as a database, keeping everything in memory to the process itself. When do we actually need to have a multi-process solution for a website? How much can we really do within a single process? One type of architecture I&amp;#39;m exploring is to have a zillion little sqlite files that are shipped around as needed, rather than providing an API to parse them out have one way where we can generate a bunch of effectively static assets of the structured data and then having the visualization happen on the client side.</description></item><item><title>gitlog in sqlite</title><link>https://willschenk.com/articles/2020/gitlog_in_sqlite/</link><pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/gitlog_in_sqlite/</guid><description>askgit is a great way to look at information inside of a repository. However it currently doesn&amp;#39;t support looking at the files inside of the commit itself â€“ it gives you a view of the repository at the time of the commit, but not the patch itself. Since I don&amp;#39;t know enough about golang and sqlite virtual tables, let&amp;#39;s just create a sqlite3 database from the logfile. Get the gitlog We are going to use our favorite test repo, ruby-git because it&amp;#39;s so deliciously meta.</description></item></channel></rss>