<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hugo on Will Schenk</title><link>https://willschenk.com/tags/hugo/</link><description>Recent content in hugo on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/hugo/feed.xml" rel="self" type="application/rss+xml"/><item><title>Emacs Blog Writing and Navigation Mode</title><link>https://willschenk.com/articles/2021/emacs_blogging_mode/</link><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/emacs_blogging_mode/</guid><description>This blog is basically my labnotes where I explore different parts of technology. Almost all of my coding related activity starts off in this repo, while I explore different things to see how they work. I have a lot of things in drafts, and I wanted to learn how to build a simple emacs interface to let me navigate around my file system. I couldn&amp;#39;t find any good documentation on how to do anything with tabulated-list-mode so I spend the evening poking around and seeing how it works.</description></item><item><title>Book Image Shortcode for Hugo</title><link>https://willschenk.com/articles/2020/book_images_shortcode/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/book_images_shortcode/</guid><description>HappyFunCorp helped build Bookshop.org which is an online bookstore that distributes 30% of the book profits to independent bookstores in your area. Basically it&amp;rsquo;s a place that people can link to that isn&amp;rsquo;t Amazon, and that will kick some money to your local community.
I wanted to find a way to easily create links to these product pages, and show images if needed. There&amp;rsquo;s no API to access bookshop (I asked on our internal dev channel) but I know how to write a script so I cobbled something together and made a hugo shortcode to render stuff on my blog.</description></item><item><title>Styling tables with Hugo</title><link>https://willschenk.com/articles/2020/styling_tables_with_hugo/</link><pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/styling_tables_with_hugo/</guid><description>Markdown is a nice format to write it, but sometimes you need to add HTML classes directly to the output to make it look how you want. Here&amp;rsquo;s a way to do that using hugo shortcodes.
Create a table shortcode Put this in /layouts/shortcodes/table.html:
{{ $htmlTable := .Inner | markdownify }} {{ $class := .Get 0 }} {{ $old := &amp;#34;&amp;lt;table&amp;gt;&amp;#34; }} {{ $new := printf &amp;#34;&amp;lt;table class=\&amp;#34;%s\&amp;#34;&amp;gt;&amp;#34; $class }} {{ $htmlTable := replace $htmlTable $old $new }} {{ $htmlTable | safeHTML }} Create a table Like this:</description></item><item><title>Styling Hugo Diffs</title><link>https://willschenk.com/articles/2020/styling_hugo_diffs/</link><pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/styling_hugo_diffs/</guid><description>I often want to show small changes I&amp;rsquo;m making to a file and it would be nice for hugo to support styling patches directly. Lets see what we can do to make this process easier.
Lets take the example of create node package.json file and add the following scripts worflow. How can we say this different than &amp;ldquo;copy this into your package.json file&amp;rdquo;?
Create sample steps Lets first create the file using npm init -y and then immediately cp package.</description></item><item><title>Using Org Mode in Hugo</title><link>https://willschenk.com/articles/2019/using_org_mode_in_hugo/</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/using_org_mode_in_hugo/</guid><description>I&amp;#39;m learning org-mode and I don&amp;#39;t really know what I&amp;#39;m doing, but this is how I&amp;#39;m trying out writing hugo posts with it. I&amp;#39;m used to markdown, so this is a what&amp;#39;s different post. Some minor org-mode tweaks For some reason when org-mode starts it doesn&amp;#39;t softwrap the paragragh text. I like to have it soft-wrapped so everything is on the screen if it&amp;#39;s not collapsed. Also having some nice indentation makes things visually cleaner, so add this snippet to your ~/.</description></item><item><title>Splitting Git Repos and Work Directories</title><link>https://willschenk.com/articles/2019/splitting_git_repos_and_workdirectories/</link><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/splitting_git_repos_and_workdirectories/</guid><description>I found a tutorial on how to manage your dotfiles, that works by splitting up the git repository (normally the .git directory) from the work directory. Since I have a lot of code that I put in my tutorials, I adapted the technique to have individual article directories mirrored in their own github repository.
Repositories and Work Directories The normal usage of git is to type git clone &amp;lt;remote&amp;gt; to get a copy of the local directory, mess with stuff, and then add and commit your changes.</description></item><item><title>Easy scraping with httpie and jq</title><link>https://willschenk.com/articles/2019/easy_scraping_with_httpie_and_jq/</link><pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/easy_scraping_with_httpie_and_jq/</guid><description>&lt;p>I recently saw a tweet mentioning the combination of using &lt;a href="https://httpie.org/">HTTPie&lt;/a> (a command line HTTP client), &lt;a href="https://stedolan.github.io/jq/">jq&lt;/a> (a lightweight and flexible command-line JSON processor) and &lt;a href="https://github.com/tomnomnom/gron">Gron&lt;/a> (Make JSON greppable!) was &amp;ldquo;all you needed to build a scraper.&amp;rdquo; Lets see if that&amp;rsquo;s true.&lt;/p></description></item><item><title>Automating hugo builds using CircleCI</title><link>https://willschenk.com/articles/2018/automating_hugo_with_circleci/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/automating_hugo_with_circleci/</guid><description>&lt;p class="lead">Here's a simple CircleCI configuration to pull down the latest version of your hugo site on GitHub commits, build it, and then push it to github pages.&lt;/p></description></item><item><title>Adding a CMS to hugo</title><link>https://willschenk.com/articles/2018/adding_a_cms_to_hugo/</link><pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/adding_a_cms_to_hugo/</guid><description>Just because we have a static site doesn&amp;rsquo;t mean that we can&amp;rsquo;t have an admin tool to write and edit posts! Lets go through how we can add the NetlifyCMS to the site and host it wherever we want.
In my case I&amp;rsquo;m storing the code on GitHub and also serving the pages from GitHub Pages. Netlify also seems like a really promising company with a number of other services that they offer, so I&amp;rsquo;d encourage you to check it out.</description></item><item><title>Building a hugo site and theme with Bootstrap</title><link>https://willschenk.com/articles/2018/building-a-hugo-site/</link><pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/building-a-hugo-site/</guid><description>Now that&amp;rsquo;s its 2018 its time to retool the blog using hugo. Why not? Hugo is built in golang and is blazing fast and everything is cleaner than it was in the middleman years.
One of the reasons that I liked middleman &amp;ndash; it&amp;rsquo;s usage of the rails&amp;rsquo; Sprockets library &amp;ndash; is no longer a strength. The javascript and front-end world has moved over to WebPack and I&amp;rsquo;ve personally moved over to create-react-app.</description></item></channel></rss>