<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Will Schenk</title><link>https://willschenk.com/tags/git/</link><description>Recent content in git on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/git/feed.xml" rel="self" type="application/rss+xml"/><item><title>CLOCViz</title><link>https://willschenk.com/articles/2021/cloc_viz/</link><pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/cloc_viz/</guid><description>I&amp;#39;ve been looking at small tools that we could combine together to get a better sense of a repository. clocviz is a nifty on that puts a front end on top of cloc, so I packaged up a docker container that lets you pass in a url and will generate some static html for you. First we package up clocviz We&amp;#39;ll build this using go 1.16.2 and then install a few dependancies, specifically cloc, wget, and git.</description></item><item><title>Interacting With Git via HTTP</title><link>https://willschenk.com/articles/2021/interacting_with_git_via_http/</link><pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/interacting_with_git_via_http/</guid><description>Git continually impresses me. I&amp;#39;ve gone down a bit of a rabbit hole with how it works, and it&amp;#39;s just a delight. I want to find a good way to see if a git repo changed, and I wonder if there&amp;#39;s a way to do this using http directly, and there is. Investgation First thing I did was to setup a proxy and run a git clone through it so I could see what the url is.</description></item><item><title>Release code diffs</title><link>https://willschenk.com/articles/2020/release_code_diffs/</link><pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/release_code_diffs/</guid><description>When tracking and upgrading software you want to have an idea of what changed. Looking at the readme is helpful, and projects that keep a changelog are polite and friendly, but it&amp;#39;s nice to actually get down to it and see what the changes actually are. Loading the repo and finding the tags We first need to look at where the code is from. In looking at gemfiles we found how to see what gem you are currently working with, and in looking and package.</description></item><item><title>Looking at package.json</title><link>https://willschenk.com/articles/2020/looking_at_packagejson/</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/looking_at_packagejson/</guid><description>Look at the dependencies First lets create a simple project and add a single module, in this case npm-api which will we use to access the main repository. npm init -y npm add npm-api And lets see what&amp;#39;s been installed in node_modules: ls -l node_modules | wc -l du -sh node_modules 68 12M node_modules 68 directories with 12M of code!</description></item><item><title>Looking at Gemfiles</title><link>https://willschenk.com/articles/2020/looking_at_gemfiles/</link><pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/looking_at_gemfiles/</guid><description>Bundler is the standard way for Ruby projects to specifiy dependencies. Let&amp;#39;s take a look at how that works, reimplement bundle outdated, and be able to see the changes that took place between the build you are using and the latest one. Ruby ecosystem: Rubygems, Bundler, Gemfile, Gemfile.lock rubygems is the overall ecosystem, which includes the main rubygems.org database of shared packages, and how they depend upon each other.</description></item><item><title>gitlog in sqlite</title><link>https://willschenk.com/articles/2020/gitlog_in_sqlite/</link><pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/gitlog_in_sqlite/</guid><description>askgit is a great way to look at information inside of a repository. However it currently doesn&amp;#39;t support looking at the files inside of the commit itself â€“ it gives you a view of the repository at the time of the commit, but not the patch itself. Since I don&amp;#39;t know enough about golang and sqlite virtual tables, let&amp;#39;s just create a sqlite3 database from the logfile. Get the gitlog We are going to use our favorite test repo, ruby-git because it&amp;#39;s so deliciously meta.</description></item><item><title>Using Askgit</title><link>https://willschenk.com/articles/2020/using_askgit/</link><pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/using_askgit/</guid><description>askgit provides a sql interface to your git repository. Let&amp;#39;s install it and see what we can figure out about the repo. Installing Following the instructions on the website, we can build the go binary with: go get -v -tags=sqlite_vtable github.com/augmentable-dev/askgit This will download the package, the dependencies, and compile everything into an executable. If you can&amp;#39;t figure out where it&amp;#39;s installed, check that you have GOPATH set correctly, and it will end up in $GOPATH/bin.</description></item><item><title>Splitting Git Repos and Work Directories</title><link>https://willschenk.com/articles/2019/splitting_git_repos_and_workdirectories/</link><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/splitting_git_repos_and_workdirectories/</guid><description>I found a tutorial on how to manage your dotfiles, that works by splitting up the git repository (normally the .git directory) from the work directory. Since I have a lot of code that I put in my tutorials, I adapted the technique to have individual article directories mirrored in their own github repository.
Repositories and Work Directories The normal usage of git is to type git clone &amp;lt;remote&amp;gt; to get a copy of the local directory, mess with stuff, and then add and commit your changes.</description></item></channel></rss>