<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>node on Will Schenk</title><link>https://willschenk.com/tags/node/</link><description>Recent content in node on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 10 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/node/feed.xml" rel="self" type="application/rss+xml"/><item><title>Database Migrations</title><link>https://willschenk.com/articles/2021/database_migrations/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/database_migrations/</guid><description>Keeping track of database changes over time is best done using database migrations stored in a code repository. I&amp;#39;m working on something where programs in different languages will be access the same database, so here we are going to look at 3 different solutions to track changes that aren&amp;#39;t tied to a specific framework. We&amp;#39;re going to setup a postgres database – with pgadmin so we can see what&amp;#39;s going on – and then do the same execersizes with 3 different ways to manage changes.</description></item><item><title>Looking at package.json</title><link>https://willschenk.com/articles/2020/looking_at_packagejson/</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/looking_at_packagejson/</guid><description>Look at the dependencies First lets create a simple project and add a single module, in this case npm-api which will we use to access the main repository. npm init -y npm add npm-api And lets see what&amp;#39;s been installed in node_modules: ls -l node_modules | wc -l du -sh node_modules 68 12M node_modules 68 directories with 12M of code!</description></item><item><title>Leveraging disposability for exploration</title><link>https://willschenk.com/articles/2020/leveraging_disposability_for_exploration/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/leveraging_disposability_for_exploration/</guid><description>I play around with a lot of technology to see what&amp;rsquo;s out there and keep myself current, especially trying to find simpler ways to do our work. One of the issues is that this can leave lots of stuff laying which can be messy. Here are some techniques I use to keep things under control.
There are two complementary principle&amp;rsquo;s that I focus on. One is reproducibility, and the other is disposibility.</description></item><item><title>Controlling IKEA Tradfri devices from your computer</title><link>https://willschenk.com/articles/2019/controlling_ikea_tradfri_with_node/</link><pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/controlling_ikea_tradfri_with_node/</guid><description>&lt;p>I stumbled upon a &lt;a href="https://vas3k.com/blog/dumbass_home/?ref=sn">fun blogpost about the Dumbass Home&lt;/a> and it turned me onto the IKEA Trådfri line of products. So I got a couple, and figured out how to control them from my laptop (or say a Raspberry PI) from node. Here&amp;rsquo;s how to do it.&lt;/p></description></item><item><title>Playing with cabal</title><link>https://willschenk.com/articles/2019/playing_with_cabal/</link><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/playing_with_cabal/</guid><description>Cabal is a &amp;ldquo;experimental p2p community chat platform&amp;rdquo;. It&amp;rsquo;s fully distributed over the dat protocol. When you create a new chat area &amp;ndash; something like a Slack &amp;ndash; it allows anyone with the same key to post and view messages everywhere. When you post a message, everyone gets it and shares it with everyone else, so even when your computer drops off there will still be a coherent view of the data.</description></item></channel></rss>