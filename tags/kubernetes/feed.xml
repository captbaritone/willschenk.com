<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes, on Will Schenk</title><link>https://willschenk.com/tags/kubernetes/</link><description>Recent content in kubernetes, on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 08 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/kubernetes/feed.xml" rel="self" type="application/rss+xml"/><item><title>NextJS with Prisma on Kubernetes</title><link>https://willschenk.com/articles/2021/next_js_with_prisma/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/next_js_with_prisma/</guid><description>Now that we have our cluster up and running, lets look at how to build and deploy a NextJS app on it, including the database. Create a NextJS app We&amp;#39;ll scaffold out a TypeScript app. npx create-next-app@latest --typescript myapp cd myapp npm run dev Fireup a local data docker run -e POSTGRES_PASSWORD=awesome_password -p 5432:5432 postgres Install prisma We&amp;#39;ll add the npm packages to our project.</description></item><item><title>Serving a knative function on the root</title><link>https://willschenk.com/articles/2021/serving_a_knative_function_on_the_root/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/serving_a_knative_function_on_the_root/</guid><description>I want to deploy everything as a knative service, including the root of the domain. Update: I found an easyier way. Easy way Turn on auto-tls and autocreate-cluster-domain-claims: kubectl patch configmap config-network --namespace knative-serving -p &amp;#39;{&amp;#34;data&amp;#34;:{&amp;#34;auto-tls&amp;#34;:&amp;#34;Enabled&amp;#34;,&amp;#34;autocreate-cluster-domain-claims&amp;#34;:&amp;#34;true&amp;#34;}}&amp;#39; Then kn domain create gitgratitude.com --ref=homepage That&amp;#39;s it. Hardway Left here for the record. Add ingress-nginx helm upgrade --install ingress-nginx ingress-nginx \ --repo https://kubernetes.</description></item><item><title>Setting up knative</title><link>https://willschenk.com/articles/2021/setting_up_knative/</link><pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/setting_up_knative/</guid><description>Let&amp;#39;s walk through how to setup a k8 cluster on digitalocean with knative. Digital Ocean Start the cluster Installing and configure the doctl tool. Then setup a cluster: doctl kubernetes cluster create gratitude \ --auto-upgrade \ &amp;#34;--node-pool=name=default;min-nodes=1;max-nodes=10;size=s-4vcpu-8gb;auto-scale=true&amp;#34; Once that&amp;#39;s in place, make sure that you have a domain, in my case gitgratitude.com: doctl compute domain create gitgratitude.com Installing knative We are going to use the knative operator to setup the install.</description></item><item><title>K8 Dashboard on Docker Desktop</title><link>https://willschenk.com/articles/2021/k8_dashboard_on_docker_desktop/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/k8_dashboard_on_docker_desktop/</guid><description>Pretty easy to setup, but here are the steps. Docker Desktop To easily get going on a local Mac, you can install the compoents using homebrew. brew install --cask docker brew install kubernetes-cli brew install kn Start up Docker, and then turn on kubernetes and make sure that you have a running node. kubectl get nodes NAME STATUS ROLES AGE VERSION docker-desktop Ready control-plane,master 5h59m v1.</description></item><item><title>Rails on Kubernetes with TLS</title><link>https://willschenk.com/articles/2021/rails_on_kubernetes_with_tls/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/rails_on_kubernetes_with_tls/</guid><description>I wanted to see how to really use kubernetes like I&amp;#39;m used to using heroku, so lets recreate everything using terraform, digital ocean, kubernetes and MAGIC! Sample rails app Build image First thing we&amp;#39;ll do is to create a docker image that we&amp;#39;ll use to build our rails app. Dockerfile.build: FROMruby:3.0.1WORKDIR/app# nodejs and yarn and clocRUN curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -RUN echo &amp;#34;deb https://dl.</description></item><item><title>Deploying OpenFaaS on Digital Ocean with Terraform</title><link>https://willschenk.com/articles/2021/deploying_open_faa_s_on_digital_ocean_with_terraform/</link><pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/deploying_open_faa_s_on_digital_ocean_with_terraform/</guid><description>We are going to look at how to use Terraform to deploy a Kubernetes cluster on Digital Ocean, add a managed postgres database, and redis and OpenFaaS in kubernetes. This will show how to use Terraform to manage the configuration and how we can access both cloud and kubernetes managed services from OpenFaaS functions. We are going to use the digitalocean, kubernetes, and helm terraform providers. The plan Provision a digitalocean_kubernetes_cluster Provision a digitalocean_database_cluster Provision 2 kubernetes_namespace for openfaas and openfaas-fn Provision a helm_release for openfaas Provision a helm_release for redis Provision 2 kubernetes_secret to point to the databases Deploy an OpenFaaS function that reads those secrets and talks to the database.</description></item></channel></rss>