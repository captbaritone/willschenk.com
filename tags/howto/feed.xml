<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>howto on Will Schenk</title><link>https://willschenk.com/tags/howto/</link><description>Recent content in howto on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/howto/feed.xml" rel="self" type="application/rss+xml"/><item><title>Docker One Liners</title><link>https://willschenk.com/articles/2021/docker_one_liners/</link><pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/docker_one_liners/</guid><description>I use docker in my workflow as an application and environment manager. I switch between multiple physical computers a lot, and like to have things self contained within work spaces that I can move from one computer to another easily, normally using `git`. Here are a few tricks that I use to have the lightest touch on my local installation as possible. Orientation If you want to install a specific set of software, you use a `Dockerfile` to create an `image`.</description></item><item><title>Using Askgit</title><link>https://willschenk.com/articles/2020/using_askgit/</link><pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/using_askgit/</guid><description>askgit provides a sql interface to your git repository. Let&amp;#39;s install it and see what we can figure out about the repo. Installing Following the instructions on the website, we can build the go binary with: go get -v -tags=sqlite_vtable github.com/augmentable-dev/askgit This will download the package, the dependencies, and compile everything into an executable. If you can&amp;#39;t figure out where it&amp;#39;s installed, check that you have GOPATH set correctly, and it will end up in $GOPATH/bin.</description></item><item><title>Getting Websters</title><link>https://willschenk.com/articles/2020/getting_websters/</link><pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/getting_websters/</guid><description>A few years ago I read a great post about the value of a good dictionary, which I installed on my laptop and then promptly forgot about. The post is very moving, and I recommend checking it out. It was recently mentioned on the planet emacs blog circuit and so I thought I&amp;#39;d document how to get it up and running on my laptop. Also I don&amp;#39;t understand what the appeal of John McPhee&amp;#39;s writing, I&amp;#39;ve tried a few of his books but found them all so plodding.</description></item><item><title>Setting up SSB-Pub Server</title><link>https://willschenk.com/articles/2020/setting_up_ssb_pub_server/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/setting_up_ssb_pub_server/</guid><description>I wanted to move my ssb installation over to a new computer, and the easiest way was to setup a pub server, invite the old and the new computer to the pub, and then swap out the keys. Here&amp;#39;s how to do it. Overview Create a server &amp;amp; name Install docker Create the docker image Setup directories, config, and easy shell commands Start up a container Publish yourself as a pub Connect your client Create a server I&amp;#39;m using debian 10 on digital ocean, but I&amp;#39;ll let you get the system on the internet.</description></item><item><title>Upgrading emacs on debian</title><link>https://willschenk.com/articles/2020/upgrading_emacs_on_debian/</link><pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/upgrading_emacs_on_debian/</guid><description>Been playing with elfeed on Emacs 26.1 on buster and it keeps crashing. I think for font related reasons. So lets follow the Emacs Wiki Instructions to upgrade to emacs-snapshots and see if that helps. Add the snap shot repository. Make sure you have the tools installed so that apt can do it&amp;#39;s internet thing. sudo apt-get install software-properties-common sudo apt-get update Add the signing key: wget -q http://emacs.</description></item><item><title>Using Syncthing</title><link>https://willschenk.com/articles/2020/using_syncthing/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/using_syncthing/</guid><description>Syncthing is a way to keep things up-to-date across machines without going through any 3rd party servers. You get both backup and file synchronization without pesky servers just using the computer capacity you probably already have laying around. Lets give it a spin. Installation on Debian On the Getting Started page of syncthing they recommend using a GUI package, but we&amp;#39;re going to install on debian on the command line.</description></item><item><title>Developing React Inside Docker</title><link>https://willschenk.com/articles/2020/developing_react_inside_docker/</link><pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/developing_react_inside_docker/</guid><description>Can we build a node application without installing node locally? We sure can! Lets walk through the process.
First make sure that docker is installed. This is handy if you are working on a remote server for example.
Bootstrap Then lets start building out the Dockerfile that we will use.
mkdir testapp cd testapp Create a Dockerfile.initial that has node:14 in it. Start up the container with Dockerfile.initial FROMnode:14WORKDIR/appCMD bash</description></item><item><title>Simple CORS workaround for local development</title><link>https://willschenk.com/articles/2020/simple_cors_workaround_for_local_development/</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/simple_cors_workaround_for_local_development/</guid><description>I&amp;#39;ve been doing a lot of web development old school, just editing HTML and JavaScript by hand without a build environment. Running npx live-server is an easy one liner to spin up a server, that opens a browser for you and also updates changes on safe. Sometimes that&amp;#39;s not enough. Often you want to pull in data from an API, and that requires HTTPS, and also you need to work around CORS limitations.</description></item><item><title>IPFS and Fuse</title><link>https://willschenk.com/articles/2020/ipfs_and_fuse/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/ipfs_and_fuse/</guid><description>IPFS is cool. It&amp;rsquo;s a peer to peer distributed file system, or graph database, where you reference the data by its hash. This has the great property that the data is no longer tied to a particular computer or server. It can be spread around and you can get it from anybody without worrying if they&amp;rsquo;ve changed or alterted it in any way. If you know what you are looking for, you don&amp;rsquo;t need to worry about who you get it from.</description></item><item><title>Book Image Shortcode for Hugo</title><link>https://willschenk.com/articles/2020/book_images_shortcode/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/book_images_shortcode/</guid><description>HappyFunCorp helped build Bookshop.org which is an online bookstore that distributes 30% of the book profits to independent bookstores in your area. Basically it&amp;rsquo;s a place that people can link to that isn&amp;rsquo;t Amazon, and that will kick some money to your local community.
I wanted to find a way to easily create links to these product pages, and show images if needed. There&amp;rsquo;s no API to access bookshop (I asked on our internal dev channel) but I know how to write a script so I cobbled something together and made a hugo shortcode to render stuff on my blog.</description></item><item><title>Styling tables with Hugo</title><link>https://willschenk.com/articles/2020/styling_tables_with_hugo/</link><pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/styling_tables_with_hugo/</guid><description>Markdown is a nice format to write it, but sometimes you need to add HTML classes directly to the output to make it look how you want. Here&amp;rsquo;s a way to do that using hugo shortcodes.
Create a table shortcode Put this in /layouts/shortcodes/table.html:
{{ $htmlTable := .Inner | markdownify }} {{ $class := .Get 0 }} {{ $old := &amp;#34;&amp;lt;table&amp;gt;&amp;#34; }} {{ $new := printf &amp;#34;&amp;lt;table class=\&amp;#34;%s\&amp;#34;&amp;gt;&amp;#34; $class }} {{ $htmlTable := replace $htmlTable $old $new }} {{ $htmlTable | safeHTML }} Create a table Like this:</description></item><item><title>Emacs Tramp tricks</title><link>https://willschenk.com/articles/2020/tramp_tricks/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/tramp_tricks/</guid><description>Emacs is amazing. It&amp;rsquo;s a very different sort of thing than a code text editor like Vim or an IDE like VSCode. It&amp;rsquo;s a different way of thinking of how to interact with a computer, where you build up techniques on top of simple tricks that let you get amazing things done. Of course, part of the appeal/challenge is that you need to figure out how to make it work yourself.</description></item><item><title>Making charts with VueJS and no tooling</title><link>https://willschenk.com/articles/2020/making_charts_with_vuejs_and_no_tooling/</link><pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/making_charts_with_vuejs_and_no_tooling/</guid><description>I learned most of what I know about coding by looking at source code &amp;ndash; especially view source on a web browser. Lets see if we can bring that era back a bit by using ES modules and eschewing webpack and other bundling systems. We will use the amazing unpkg.com CDN to get our building blocks to assemble together.
First get vue working From unpkg we will link to tailwindcss in the head tag, and then import vuejs from using a script type=&amp;quot;module&amp;quot; tag.</description></item><item><title>Leveraging disposability for exploration</title><link>https://willschenk.com/articles/2020/leveraging_disposability_for_exploration/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/leveraging_disposability_for_exploration/</guid><description>I play around with a lot of technology to see what&amp;rsquo;s out there and keep myself current, especially trying to find simpler ways to do our work. One of the issues is that this can leave lots of stuff laying which can be messy. Here are some techniques I use to keep things under control.
There are two complementary principle&amp;rsquo;s that I focus on. One is reproducibility, and the other is disposibility.</description></item><item><title>Playing with tailwind</title><link>https://willschenk.com/articles/2020/playing_with_tailwind/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/playing_with_tailwind/</guid><description>We are going to use tailwindcss to build a site. We will start with a blank folder and a static HTML file to work on the designs, and then slowly bring in other tools when needed to add in functionality.
The site that we are going to build is a company directory that pulls in data from Google Apps Suite. The goal here is to build the simplest thing possible and not get lost in the tooling.</description></item><item><title>Styling Hugo Diffs</title><link>https://willschenk.com/articles/2020/styling_hugo_diffs/</link><pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/styling_hugo_diffs/</guid><description>I often want to show small changes I&amp;rsquo;m making to a file and it would be nice for hugo to support styling patches directly. Lets see what we can do to make this process easier.
Lets take the example of create node package.json file and add the following scripts worflow. How can we say this different than &amp;ldquo;copy this into your package.json file&amp;rdquo;?
Create sample steps Lets first create the file using npm init -y and then immediately cp package.</description></item><item><title>Template to setup a linode server with DNS and HTTPS</title><link>https://willschenk.com/articles/2020/server_templating_with_terraform/</link><pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/server_templating_with_terraform/</guid><description>I use DNSimple for domain management, and I&amp;rsquo;ve been playing around with a bunch of different cloud providers and deployment setups. So I wanted to make it easier to give these machines names rather than clicking through the control panel all the time. Lets walk through how to use terraform, DNSimple, and linode to provision and new machine and give it a name on the internet, and then create a webserver on it to which encrypts traffic.</description></item><item><title>Terraform and Packer with Digital Ocean</title><link>https://willschenk.com/articles/2019/terraform_with_digitalocean/</link><pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/terraform_with_digitalocean/</guid><description>Terraform orchastrates the setting up of your infrastructure, and packer helps you build images. We are going to setup terraform to work with Digital Ocean, and then use package to create and image and deploy it.
Install terraform Install terraform from the download page. I&amp;rsquo;m on Linux, so we&amp;rsquo;ll download the latest version and put it in /usr/local/bin.
cd /tmp wget https://releases.hashicorp.com/terraform/0.12.18/terraform_0.12.18_linux_amd64.zip unzip terraform_0.12.18_linux_amd64.zip sudo mv terraform /usr/local/bin Setup Digital Ocean API We need two tokens.</description></item><item><title>Computer Setup Script</title><link>https://willschenk.com/articles/2019/computer_setup_script/</link><pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/computer_setup_script/</guid><description>Putting things in scripts makes it easy to get up and running quickly. Devops isn&amp;rsquo;t just for servers or Dockerfiles, you can also use it for your own environment. This is the script that I use to get my Chromebooks up and running after a wipe and how I get a new Linux machine up an running. Lets use the bash boilerplate to write our script.
I&amp;rsquo;ll update this later to include OSX.</description></item><item><title>Setting up an IPFS Node</title><link>https://willschenk.com/articles/2019/setting_up_an_ipfs_node/</link><pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/setting_up_an_ipfs_node/</guid><description>IPFS nodes that run in the broswer communicate over websockets to the main network. Lets walk through how to setup a IPFS server that your browser code can connect to in addition to the public gateways. Strategy Wire everything up with docker-compose Create and configure an ipfs container Setup nginx with dummy certificate Replace that certificate with certbot Setup certbot to auto renew the certificates Requirements You will need: A server with a domain or subdomain to use certbot to get a certificate A working docker-compose install I&amp;#39;m using a prebuilt docker image on Digital Ocean but the key part is to get the domain name.</description></item><item><title>Using Org Mode in Hugo</title><link>https://willschenk.com/articles/2019/using_org_mode_in_hugo/</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/using_org_mode_in_hugo/</guid><description>I&amp;#39;m learning org-mode and I don&amp;#39;t really know what I&amp;#39;m doing, but this is how I&amp;#39;m trying out writing hugo posts with it. I&amp;#39;m used to markdown, so this is a what&amp;#39;s different post. Some minor org-mode tweaks For some reason when org-mode starts it doesn&amp;#39;t softwrap the paragragh text. I like to have it soft-wrapped so everything is on the screen if it&amp;#39;s not collapsed. Also having some nice indentation makes things visually cleaner, so add this snippet to your ~/.</description></item><item><title>Reverse engineering APIs using Chrome Developer Tools</title><link>https://willschenk.com/articles/2019/reverse_engineering_apis_using_chrome/</link><pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/reverse_engineering_apis_using_chrome/</guid><description>I want to get a list of all of the podcast episodes that I&amp;rsquo;ve starred on PocketCasts. There&amp;rsquo;s no obvious way to export this from the application, and they don&amp;rsquo;t have a published interface. Lets look at hope to use chrome developer tools to figure out what the API is.
We know that PocketCasts must have an API since it also has a mobile app &amp;ndash; the code in the mobile app must talk to the code in the server using a format that computers understand, which is basically the definition of an API.</description></item><item><title>Controlling IKEA Tradfri devices from your computer</title><link>https://willschenk.com/articles/2019/controlling_ikea_tradfri_with_node/</link><pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/controlling_ikea_tradfri_with_node/</guid><description>&lt;p>I stumbled upon a &lt;a href="https://vas3k.com/blog/dumbass_home/?ref=sn">fun blogpost about the Dumbass Home&lt;/a> and it turned me onto the IKEA Trådfri line of products. So I got a couple, and figured out how to control them from my laptop (or say a Raspberry PI) from node. Here&amp;rsquo;s how to do it.&lt;/p></description></item><item><title>Splitting Git Repos and Work Directories</title><link>https://willschenk.com/articles/2019/splitting_git_repos_and_workdirectories/</link><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/splitting_git_repos_and_workdirectories/</guid><description>I found a tutorial on how to manage your dotfiles, that works by splitting up the git repository (normally the .git directory) from the work directory. Since I have a lot of code that I put in my tutorials, I adapted the technique to have individual article directories mirrored in their own github repository.
Repositories and Work Directories The normal usage of git is to type git clone &amp;lt;remote&amp;gt; to get a copy of the local directory, mess with stuff, and then add and commit your changes.</description></item><item><title>Setting up Indieweb Homepage</title><link>https://willschenk.com/articles/2019/setting_up_indieweb/</link><pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/setting_up_indieweb/</guid><description>&lt;p>Remember &lt;a href="http://microformats.org/">microformats&lt;/a>? Me neither!
Back when the web was open and we were trying to find ways to interconnect independent things?
Let&amp;rsquo;s bring them back!&lt;/p></description></item><item><title>Easy scraping with httpie and jq</title><link>https://willschenk.com/articles/2019/easy_scraping_with_httpie_and_jq/</link><pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/easy_scraping_with_httpie_and_jq/</guid><description>&lt;p>I recently saw a tweet mentioning the combination of using &lt;a href="https://httpie.org/">HTTPie&lt;/a> (a command line HTTP client), &lt;a href="https://stedolan.github.io/jq/">jq&lt;/a> (a lightweight and flexible command-line JSON processor) and &lt;a href="https://github.com/tomnomnom/gron">Gron&lt;/a> (Make JSON greppable!) was &amp;ldquo;all you needed to build a scraper.&amp;rdquo; Lets see if that&amp;rsquo;s true.&lt;/p></description></item><item><title>Building a slimmer go Docker container</title><link>https://willschenk.com/articles/2019/building_a_slimmer_go_docker_container/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/building_a_slimmer_go_docker_container/</guid><description>&lt;p>Go binaries are self contained, which means that they don&amp;rsquo;t need anything special installed in the environment to deploy them. When people make &lt;code>Dockerfiles&lt;/code> to build go projects, they often include the the golang compilers and build tools, which isn&amp;rsquo;t necessary for running the container. I&amp;rsquo;m going to use &lt;a href="https://github.com/somarat/healer">healer&lt;/a> Docker container that &amp;ldquo;Automatically heal docker containers that report themselves unhealthy&amp;rdquo; as an example of reducing the image size from 648MB to 17MB.&lt;/p></description></item><item><title>Bootstrapping a react app</title><link>https://willschenk.com/articles/2019/bootstrapping_a_react_app_with_bootstrap/</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/bootstrapping_a_react_app_with_bootstrap/</guid><description>&lt;p>Here&amp;rsquo;s a quick recipe for getting a blank react project with bootstrap up and running. We&amp;rsquo;ll walk
though all of the steps that you&amp;rsquo;ll need to get a basic bootstrap based framework up and running,
ready for theming and component implementation using redux.&lt;/p></description></item><item><title>Setting up a chromebook for development</title><link>https://willschenk.com/articles/2019/setting_up_chromebook/</link><pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/setting_up_chromebook/</guid><description>&lt;p>I just switch my pixelbook back to the stable channel, and this is what I did to get back to developing on it.&lt;/p></description></item><item><title>Setting up IPFS on a chromebook</title><link>https://willschenk.com/articles/2019/setting_up_ipfs_on_chromebook/</link><pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/setting_up_ipfs_on_chromebook/</guid><description>&lt;p>Lets look at how to run an ipfs node on a chromebook. We are using the linux container for this, and in order to get the experience right we&amp;rsquo;ll need to install some chrome extensions to make it work seamlessly.&lt;/p></description></item><item><title>Image Manipulation in Firebase</title><link>https://willschenk.com/articles/2018/image_manipulation_in_firebase/</link><pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/image_manipulation_in_firebase/</guid><description>We can manipulate images using JavaScript directly, which can be run both on the server or browser environment. Lets take a look at how we&amp;rsquo;d do this using create-react-app and firebase. We will deploy a function on firebase that will download the user&amp;rsquo;s avatar, manipulate the image and overlay it with a mask, and then spit out an image.
Project Setup First make sure that you have nvm installed. We&amp;rsquo;ll need a different version of node for create-react-app then we will for firebase functions.</description></item><item><title>Implementing Serverless OAuth</title><link>https://willschenk.com/articles/2018/implementing_serverless_oauth/</link><pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/implementing_serverless_oauth/</guid><description>Most of the serverless platforms have their own forms of authentication, but it might not support the specific service that you are looking to use. Lets go through how we can build a react single page app, hosting on firebase, that talks to the unsplash service directly. It will be hosted on firebase stoage, and with a tiny bit of firebase functions to tie it together.
How oauth works Here is the overall process:</description></item><item><title>Adding Facebook Login with react</title><link>https://willschenk.com/articles/2018/adding_facebook_login_with_react/</link><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/adding_facebook_login_with_react/</guid><description>Sometimes you just can&amp;rsquo;t get away from facebook. Here&amp;rsquo;s a quick tutorial on how to add facebook login to your react app.
First you need to create a facebook app, which is an involved process especially if you want to let, you know, other people log in to your app. Getting your app approved and otherwise up and running here is left as an excersize for you to figure out.</description></item><item><title>Automating hugo builds using CircleCI</title><link>https://willschenk.com/articles/2018/automating_hugo_with_circleci/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/automating_hugo_with_circleci/</guid><description>&lt;p class="lead">Here's a simple CircleCI configuration to pull down the latest version of your hugo site on GitHub commits, build it, and then push it to github pages.&lt;/p></description></item><item><title>Adding a CMS to hugo</title><link>https://willschenk.com/articles/2018/adding_a_cms_to_hugo/</link><pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/adding_a_cms_to_hugo/</guid><description>Just because we have a static site doesn&amp;rsquo;t mean that we can&amp;rsquo;t have an admin tool to write and edit posts! Lets go through how we can add the NetlifyCMS to the site and host it wherever we want.
In my case I&amp;rsquo;m storing the code on GitHub and also serving the pages from GitHub Pages. Netlify also seems like a really promising company with a number of other services that they offer, so I&amp;rsquo;d encourage you to check it out.</description></item><item><title>Building a hugo site and theme with Bootstrap</title><link>https://willschenk.com/articles/2018/building-a-hugo-site/</link><pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/building-a-hugo-site/</guid><description>Now that&amp;rsquo;s its 2018 its time to retool the blog using hugo. Why not? Hugo is built in golang and is blazing fast and everything is cleaner than it was in the middleman years.
One of the reasons that I liked middleman &amp;ndash; it&amp;rsquo;s usage of the rails&amp;rsquo; Sprockets library &amp;ndash; is no longer a strength. The javascript and front-end world has moved over to WebPack and I&amp;rsquo;ve personally moved over to create-react-app.</description></item><item><title>Getting firebase and grpc working under termux</title><link>https://willschenk.com/articles/2017/getting_firebase_and_grpc_working_under_termux/</link><pubDate>Sun, 10 Dec 2017 17:36:17 +0000</pubDate><guid>https://willschenk.com/articles/2017/getting_firebase_and_grpc_working_under_termux/</guid><description>firebase depends on grpc, which isn’t set to build right on the Chromebook. This is because node-pre-gyp, which is used to download precompiled binaries, is not setup correctly. In then uses node-gyp to compile the C++ bindings directly, which is also not setup correctly.
We are going to adjust the settings of node-gyp to make it compile things right under termux, and then we are going to tweak the grpc package itself in our local cache to make it build correctly.</description></item><item><title>Authenticated routes using react-router</title><link>https://willschenk.com/articles/2017/authenticated_routes_using_react_router/</link><pubDate>Tue, 05 Dec 2017 22:19:56 +0000</pubDate><guid>https://willschenk.com/articles/2017/authenticated_routes_using_react_router/</guid><description>&lt;p>Here&amp;rsquo;s a simple walk through on how to use authenticated routes with react-router.&lt;/p></description></item><item><title>Styling and theming with material-ui: React + Material Design</title><link>https://willschenk.com/articles/2017/styling_and_theming_with_material_ui_react__material_design/</link><pubDate>Mon, 04 Dec 2017 19:35:07 +0000</pubDate><guid>https://willschenk.com/articles/2017/styling_and_theming_with_material_ui_react__material_design/</guid><description>We’ve looked at building and styling with rmwc, now lets look a the king of the React Material libraries, Material-UI!
The implementation strategy here is different — instead of including a generated CSS file that applies to all of the elements, each component includes the CSS that it needs in an isolated way. import Button from ‘material-ui/Button’; will include all of the necessary CSS to render that element. This is done with webpack basically.</description></item><item><title>Styling and theming with rmwc: React + Material Design</title><link>https://willschenk.com/articles/2017/styling_and_theming_with_rmwc_react__material_design/</link><pubDate>Wed, 29 Nov 2017 02:11:50 +0000</pubDate><guid>https://willschenk.com/articles/2017/styling_and_theming_with_rmwc_react__material_design/</guid><description>There are a couple of good material design libraries out there, and I’m going to build a basic site with create-react-app to test out how to really make them work. Material design released a new version of their web components, and we’re going to look at a few React libraries that will help us use them.
Material Components For Web These components were written in SASS and JS. There are various ways to customize them and build your design.</description></item><item><title>Save your Medium articles to your computer in markdown</title><link>https://willschenk.com/articles/2016/save_your_medium_articles_to_your_computer_in_markdown/</link><pubDate>Thu, 27 Oct 2016 22:34:00 +0000</pubDate><guid>https://willschenk.com/articles/2016/save_your_medium_articles_to_your_computer_in_markdown/</guid><description>I really like the editing tools and community on Medium, but I want to keep all my writing in a centralized place. So I wrote a script based upon my dataflow programming with Rake post that pulls down my latest medium articles, converts to markdown, and downloads any associated images so I can keep my own copy on my domain.
I really like the tools, but I want to own my data.</description></item><item><title>Deploying ActionCable on Heroku with Sidekiq</title><link>https://willschenk.com/articles/2016/deploying-actioncable-on-heroku/</link><pubDate>Mon, 11 Jul 2016 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2016/deploying-actioncable-on-heroku/</guid><description>ActionCable is WebSockets on rails. This lets you create realtime, interactive systems, where you can push data from one client to another client without reloading or polling. But how do we deploy it on heroku?
ActionCable is composed to two main parts: a javascript client library, and a backend pub/sub system built upon Redis. We&amp;rsquo;re also going to use ActiveJob to offload the publishing tasks from the main user thread, so we&amp;rsquo;ll also be setting up sidekiq.</description></item><item><title>Using seed to explore APIs</title><link>https://willschenk.com/articles/2015/using-seed-to-explore/</link><pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/using-seed-to-explore/</guid><description>I&amp;rsquo;ve been working to update seed, which is HappyFunCorp&amp;rsquo;s app generator to make it easy to kick off MVPs. Check out the website for more information. One of the things that I&amp;rsquo;ve started to do is to seperate out the dependancies more, and being tutorials on how to use each of the different features. After I link to that stuff, let&amp;rsquo;s walk through a way to combine different techniques we&amp;rsquo;ve discussed together.</description></item><item><title>Adding search to a middleman blog</title><link>https://willschenk.com/articles/2015/adding-search-to-a-middleman-blog/</link><pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/adding-search-to-a-middleman-blog/</guid><description>We&amp;rsquo;re going to build a simple, niave search for middleman blogs. We&amp;rsquo;re going to build a search index at build time, and then use that index to perform the search itself on the client side.
Building the index When you typed in something in google, it doesn&amp;rsquo;t then go and hit every page on the internet to check to see if there&amp;rsquo;s a match. It doesn&amp;rsquo;t even look at every page that it has squirreled away somewhere in the googleplex.</description></item><item><title>OSX Script for Kiosk Mode</title><link>https://willschenk.com/articles/2015/osx-script-for-kiosk-mode/</link><pubDate>Wed, 20 May 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/osx-script-for-kiosk-mode/</guid><description>In the office, we run Jenkins on the same machine that we run Benevolent Gaze. During iOS builds, the iOS simulator will take over the screen for the build, and then leave the beautiful screen on the desktop, hiding our smiling faces. We want to return to Safari in this case, but we also want to make sure that if someone is actually in front of the machine it will let them do their thing.</description></item><item><title>Slow data and Fast Sites</title><link>https://willschenk.com/articles/2015/slow-data-and-fast-sites/</link><pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/slow-data-and-fast-sites/</guid><description>This article walks through the motivations driving and benefits of using a the Seed Architecture for building performant websites using Middleman, React, and a seperate API server such as Parse. The benefits are:
You get full SEO with a heavy client JavaScript site without having to do crazy things with PhantomJS or meta fragments. Hosting and operations become both cheap and doesn&amp;rsquo;t require a support team. Scaling out the system is mainly a bandwidth problem, and secondarily a API scaling problem for a subset of behavior.</description></item><item><title>Setting up Devise with Twitter and Facebook and other Omniauth schemes without email addresses</title><link>https://willschenk.com/articles/2015/setting-up-devise-with-twitter-and-facebook-and-other-omniauth-schemes-without-email-addresses/</link><pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/setting-up-devise-with-twitter-and-facebook-and-other-omniauth-schemes-without-email-addresses/</guid><description>Adding social login to your sites really makes it easier to get users onboard. Devise is great to help get an authentication system up and running, but there are a few tricky things to get right. The first challenge is that you don&amp;rsquo;t always get the user&amp;rsquo;s email address when the first connect. The second challenge is that we want to request the minimum permissions first so that the user is more likely to sign up, and gradually ask more as the time arises.</description></item><item><title>Using rake for dataflow programming and data science</title><link>https://willschenk.com/articles/2014/using-rake-for-dataflow-programming-and-data-science/</link><pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/using-rake-for-dataflow-programming-and-data-science/</guid><description>I&amp;rsquo;ve been using Rake more and more for data collection and processing tasks. Rake is pretty pretty powerful. Most people know it as way to add external tasks to a Rails app, but it&amp;rsquo;s actually very powerful build system. We&amp;rsquo;re going to take advantage of that to build out a framework that will make it easy to collect, process, and interpret data while keeping it all in sync.
In fact, if you just want to start playing with stuff now, head over to the rake-data site to go through some walk throughs.</description></item><item><title>Building Middleman Extensions</title><link>https://willschenk.com/articles/2014/building-middleman-extensions/</link><pubDate>Wed, 17 Dec 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/building-middleman-extensions/</guid><description>Middleman extensions, like rails plugins, are packaged as gems. There are three main ways to extend middleman. You can add helpers, add middleman commands, or extend the sitemap generation in someway. Lets go through those in detail.
Creating the extension Create a gem using bundle gem _name_
$ bundle gem middleman-graphviz Add middleman-core to your gem dependancies in the .gemspec file:
spec.add_runtime_dependency &amp;#39;middleman-core&amp;#39;, [&amp;#39;&amp;gt;= 3.0.0&amp;#39;] Register your extension into middleman. Our gem will be activated in the sites config.</description></item><item><title>Middleman Tricks and Hacks</title><link>https://willschenk.com/articles/2014/middleman-tricks-and-hacks/</link><pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/middleman-tricks-and-hacks/</guid><description>As part of the process of getting this site to work, I learned some more things about how to better build a site with middleman. Building off of our foundational article here are a few other things that I found very useful when using middleman to build a static site with a bunch of dynamically generated content.
Partials The index.html.haml, articles.html.haml, tag.html.haml and calendar.html.haml pages all use the same partial to list out the post archives, which are mostly the same.</description></item><item><title>Dateslice: Writing rails extensions</title><link>https://willschenk.com/articles/2014/dateslice-writing-rails-extensions/</link><pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/dateslice-writing-rails-extensions/</guid><description>Ruby on Rails is a very modular framework since the merging with Merb in 2008. The opinionated conventions are implemented under using techniques that let you jump in and build your own components, picking and choosing different parts that let you build Rails apps in the same straightforward way you would if using the official modules.
Let&amp;rsquo;s go through the dateslices gem which I wrote to extend active record so that we could better interact with the group by sql command when dealing with dates.</description></item><item><title>Pulling data out of Google Analytics</title><link>https://willschenk.com/articles/2014/pulling-data-out-of-google-analytics/</link><pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/pulling-data-out-of-google-analytics/</guid><description>I like staring at the real time stats of Google Analytics. As a dashboard, it&amp;rsquo;s not really as amazing as Chartbeat is, and it doesn&amp;rsquo;t let you drill down into the data as much as Mixpanel. But GA is super simple to setup and it&amp;rsquo;s Google, so everyone uses it.
Another obsessive/fun thing to do is to see where that spike in inbound traffic is coming from. On HappyFunCorp there are days where we get a sudden influx of Happy Thoughts which warms our hearts and floods our inboxes.</description></item><item><title>Building Sites with Middleman</title><link>https://willschenk.com/articles/2014/building-sites-with-middleman/</link><pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/building-sites-with-middleman/</guid><description>I make a lot of websites, and I have a certain toolkit that I use to build them. The most useful things I use are:
layouts and partials so I only need to set things up once haml for writing html, since I don&amp;rsquo;t like closing tags Bootstrap and sass for writing css Markdown for formatting large blogs of content coffeescript for JavaScript Middleman is a static site generator, which means that it takes a bunch of source files, does some stuff with it, and produces static HTML, CSS, Images, and Javascript that can be hosted on a basic server somewhere, including hosting on S3 or Github Pages so you don&amp;rsquo;t need to consider a server.</description></item><item><title>Scripting Twitter: Collecting Data and Writing Bots</title><link>https://willschenk.com/articles/2014/scripting-twitter/</link><pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/scripting-twitter/</guid><description>Lets build on our command line url exploring tool to look at how we can interact with Twitter. We are going to cover how to make a script that will pull information out of twitter, how to deal with its rate limiting, and how to interact with users on Twitter itself.
Twitter uses OAuth 1.0A as a way to authenticate requests. As a script writer, this is super annoying, because you can&amp;rsquo;t just stick a username and password in the environment and go from there.</description></item><item><title>Embedding 3d models on your page</title><link>https://willschenk.com/articles/2014/embedding-3d-models-on-your-page/</link><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/embedding-3d-models-on-your-page/</guid><description>Github has an embeddable 3d model viewer that you can use to display a model on your site. The model needs to be hosted in a github repo, and the format is
&amp;lt;script src=&amp;quot;https://embed.github.com/view/3d/&amp;lt;username&amp;gt;/&amp;lt;repo&amp;gt;/&amp;lt;ref&amp;gt;/&amp;lt;path_to_file&amp;gt;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
Here&amp;rsquo;s a model of me that we made using the Structure 3d scanner which is a fun device that plugs into your iPhone or iPad.
Pretty fun right?
The next thing you need to do is to get a 3d printer, so you can create action figures for your office.</description></item><item><title>Making a command line utility with gems and thor</title><link>https://willschenk.com/articles/2014/making-a-command-line-utility-with-gems-and-thor/</link><pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/making-a-command-line-utility-with-gems-and-thor/</guid><description>Some scripts work well because they are self contained and don&amp;rsquo;t have a lot of dependancies, like the hosts on your network tracker.
Others scripts
have more code than fits into a single file multiple options and switches have an extensive set of dependancies And on those cases, its better to make a gem and use thor
Hammer of the Gods Lets figure out how to make some command line tools and package them up so that they can be shared and used by other people.</description></item><item><title>Making Yosemite Faster</title><link>https://willschenk.com/articles/2014/making-yosemite-faster/</link><pubDate>Fri, 07 Nov 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/making-yosemite-faster/</guid><description>Since I&amp;rsquo;ve upgraded to Yosemite my computer has gotten slower and slower. When it first boots up, it is it&amp;rsquo;s old fast self, but after a few hours everything slows down. Remember the days when you needed to restart your computer to keep it working well? I had forgotten, and I wasn&amp;rsquo;t really into remembering it.
I also upgraded to Airmail 2. I get a ton of email and it used it be a lot faster than using Mail.</description></item><item><title>How to track your coworkers</title><link>https://willschenk.com/articles/2014/how-to-track-your-coworkers/</link><pubDate>Fri, 31 Oct 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/how-to-track-your-coworkers/</guid><description>How much information do you bleed?
Ever wonder who is else is using your network? Or,who has actually showed up at the office?
Networking primer The simplest thing we can do to make this work is to check to see which devices have registered themselves on the network. As devices come and go, they connect automatically, so we will have a pretty good idea if people are there or not. Phones seem to attach and detach quite frequency, probably to conserve battery, so if we are want to answer the question &amp;ldquo;is so-and-so in the office&amp;rdquo; we&amp;rsquo;ll need to add additional logic to determine how far spaced the &amp;ldquo;sighting&amp;rdquo; events are to mean that the person has left the office, rather than the phone has gone to sleep.</description></item></channel></rss>