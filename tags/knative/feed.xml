<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>knative, on Will Schenk</title><link>https://willschenk.com/tags/knative/</link><description>Recent content in knative, on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/knative/feed.xml" rel="self" type="application/rss+xml"/><item><title>Setting up knative eventing</title><link>https://willschenk.com/articles/2021/setting_up_knative_eventing/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/setting_up_knative_eventing/</guid><description>Here&amp;#39;s a walk through of how to setup knative eventing. I couldn&amp;#39;t find this information in one place and it took longer than I expected to sort it out. There are a couple of ways you can use eventing. One is to sent messages directly to specific services. This I outline walk through as a direct event. Another is to use a broker and a trigger. A broker is basically the place you send stuff to, and then you define specific listeners by creating a trigger.</description></item><item><title>NextJS with Prisma on Kubernetes</title><link>https://willschenk.com/articles/2021/next_js_with_prisma/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/next_js_with_prisma/</guid><description>Now that we have our cluster up and running, lets look at how to build and deploy a NextJS app on it, including the database. Create a NextJS app We&amp;#39;ll scaffold out a TypeScript app. npx create-next-app@latest --typescript myapp cd myapp npm run dev Fireup a local data docker run -e POSTGRES_PASSWORD=awesome_password -p 5432:5432 postgres Install prisma We&amp;#39;ll add the npm packages to our project.</description></item><item><title>Serving a knative function on the root</title><link>https://willschenk.com/articles/2021/serving_a_knative_function_on_the_root/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/serving_a_knative_function_on_the_root/</guid><description>I want to deploy everything as a knative service, including the root of the domain. Update: I found an easyier way. Easy way Turn on auto-tls and autocreate-cluster-domain-claims: kubectl patch configmap config-network --namespace knative-serving -p &amp;#39;{&amp;#34;data&amp;#34;:{&amp;#34;auto-tls&amp;#34;:&amp;#34;Enabled&amp;#34;,&amp;#34;autocreate-cluster-domain-claims&amp;#34;:&amp;#34;true&amp;#34;}}&amp;#39; Then kn domain create gitgratitude.com --ref=homepage That&amp;#39;s it. Hardway Left here for the record. Add ingress-nginx helm upgrade --install ingress-nginx ingress-nginx \ --repo https://kubernetes.</description></item><item><title>Setting up knative</title><link>https://willschenk.com/articles/2021/setting_up_knative/</link><pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/setting_up_knative/</guid><description>Let&amp;#39;s walk through how to setup a k8 cluster on digitalocean with knative. Digital Ocean Start the cluster Installing and configure the doctl tool. Then setup a cluster: doctl kubernetes cluster create gratitude \ --auto-upgrade \ &amp;#34;--node-pool=name=default;min-nodes=1;max-nodes=10;size=s-4vcpu-8gb;auto-scale=true&amp;#34; Once that&amp;#39;s in place, make sure that you have a domain, in my case gitgratitude.com: doctl compute domain create gitgratitude.com Installing knative We are going to use the knative operator to setup the install.</description></item></channel></rss>