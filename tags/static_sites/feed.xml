<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>static_sites on Will Schenk</title><link>https://willschenk.com/tags/static_sites/</link><description>Recent content in static_sites on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/static_sites/feed.xml" rel="self" type="application/rss+xml"/><item><title>Building static OpenFaas templates</title><link>https://willschenk.com/articles/2021/building_an_openfaas_template/</link><pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/building_an_openfaas_template/</guid><description>I&amp;#39;ve been playing with OpenFaaS recently and it&amp;#39;s a very accessable way to starting building cloud first services. I wanted to see what I could cram in there, so I built a few templates that would let me host a static site. One that is just html, and another than can be built with something like create-react-app. Static Create the template directory: mkdir -p template/static Then add a template/static/template.</description></item><item><title>Simple CORS workaround for local development</title><link>https://willschenk.com/articles/2020/simple_cors_workaround_for_local_development/</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/simple_cors_workaround_for_local_development/</guid><description>I&amp;#39;ve been doing a lot of web development old school, just editing HTML and JavaScript by hand without a build environment. Running npx live-server is an easy one liner to spin up a server, that opens a browser for you and also updates changes on safe. Sometimes that&amp;#39;s not enough. Often you want to pull in data from an API, and that requires HTTPS, and also you need to work around CORS limitations.</description></item><item><title>Making charts with VueJS and no tooling</title><link>https://willschenk.com/articles/2020/making_charts_with_vuejs_and_no_tooling/</link><pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/making_charts_with_vuejs_and_no_tooling/</guid><description>I learned most of what I know about coding by looking at source code &amp;ndash; especially view source on a web browser. Lets see if we can bring that era back a bit by using ES modules and eschewing webpack and other bundling systems. We will use the amazing unpkg.com CDN to get our building blocks to assemble together.
First get vue working From unpkg we will link to tailwindcss in the head tag, and then import vuejs from using a script type=&amp;quot;module&amp;quot; tag.</description></item><item><title>Implementing Serverless OAuth</title><link>https://willschenk.com/articles/2018/implementing_serverless_oauth/</link><pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/implementing_serverless_oauth/</guid><description>Most of the serverless platforms have their own forms of authentication, but it might not support the specific service that you are looking to use. Lets go through how we can build a react single page app, hosting on firebase, that talks to the unsplash service directly. It will be hosted on firebase stoage, and with a tiny bit of firebase functions to tie it together.
How oauth works Here is the overall process:</description></item><item><title>Automating hugo builds using CircleCI</title><link>https://willschenk.com/articles/2018/automating_hugo_with_circleci/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/automating_hugo_with_circleci/</guid><description>&lt;p class="lead">Here's a simple CircleCI configuration to pull down the latest version of your hugo site on GitHub commits, build it, and then push it to github pages.&lt;/p></description></item><item><title>Adding a CMS to hugo</title><link>https://willschenk.com/articles/2018/adding_a_cms_to_hugo/</link><pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/adding_a_cms_to_hugo/</guid><description>Just because we have a static site doesn&amp;rsquo;t mean that we can&amp;rsquo;t have an admin tool to write and edit posts! Lets go through how we can add the NetlifyCMS to the site and host it wherever we want.
In my case I&amp;rsquo;m storing the code on GitHub and also serving the pages from GitHub Pages. Netlify also seems like a really promising company with a number of other services that they offer, so I&amp;rsquo;d encourage you to check it out.</description></item><item><title>Building a hugo site and theme with Bootstrap</title><link>https://willschenk.com/articles/2018/building-a-hugo-site/</link><pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/building-a-hugo-site/</guid><description>Now that&amp;rsquo;s its 2018 its time to retool the blog using hugo. Why not? Hugo is built in golang and is blazing fast and everything is cleaner than it was in the middleman years.
One of the reasons that I liked middleman &amp;ndash; it&amp;rsquo;s usage of the rails&amp;rsquo; Sprockets library &amp;ndash; is no longer a strength. The javascript and front-end world has moved over to WebPack and I&amp;rsquo;ve personally moved over to create-react-app.</description></item><item><title>Building a GUI for managing middleman blogs</title><link>https://willschenk.com/articles/2015/building-a-gui-for-managing-middleman-blogs/</link><pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/building-a-gui-for-managing-middleman-blogs/</guid><description>Can we make static site generators work like a normal site? Lets take a look at how we&amp;rsquo;d start to implement Slow Data and Fast Sites using the example of building an admin UI for a Middleman blog.
TLDR Given a middleman app with middleman-blog and middleman-blog-drafts configured:
Add middleman-blog-ui in your Gemfile. This document describes how middleman-blog-ui works. Add activate :blog_ui in config.rb Start middleman server Visit http://localhost:4567/admin. And now you are living in the fabulous world where you can, from your browser:</description></item><item><title>Slow data and Fast Sites</title><link>https://willschenk.com/articles/2015/slow-data-and-fast-sites/</link><pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/slow-data-and-fast-sites/</guid><description>This article walks through the motivations driving and benefits of using a the Seed Architecture for building performant websites using Middleman, React, and a seperate API server such as Parse. The benefits are:
You get full SEO with a heavy client JavaScript site without having to do crazy things with PhantomJS or meta fragments. Hosting and operations become both cheap and doesn&amp;rsquo;t require a support team. Scaling out the system is mainly a bandwidth problem, and secondarily a API scaling problem for a subset of behavior.</description></item></channel></rss>