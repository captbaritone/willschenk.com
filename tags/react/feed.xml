<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react on Will Schenk</title><link>https://willschenk.com/tags/react/</link><description>Recent content in react on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 15 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/react/feed.xml" rel="self" type="application/rss+xml"/><item><title>Bootstrapping React with Tailwind</title><link>https://willschenk.com/articles/2021/bootstrapping_react_with_tailwind_css/</link><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/bootstrapping_react_with_tailwind_css/</guid><description>This is straight from the Tailwind Install Guide but here so I can remember it easier. Setup the project npx create-react-app my-app cd my-app Install tailwindcss npm install -D tailwindcss@npm:@tailwindcss/postcss7-compat \ @tailwindcss/postcss7-compat \ postcss@^7 \ autoprefixer@^9 Install craco npm install @craco/craco And change the scripts part of package.json: &amp;#34;start&amp;#34;: &amp;#34;craco start&amp;#34;, &amp;#34;build&amp;#34;: &amp;#34;craco build&amp;#34;, &amp;#34;test&amp;#34;: &amp;#34;craco test&amp;#34;, Create a craco.</description></item><item><title>Building static OpenFaas templates</title><link>https://willschenk.com/articles/2021/building_an_openfaas_template/</link><pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/building_an_openfaas_template/</guid><description>I&amp;#39;ve been playing with OpenFaaS recently and it&amp;#39;s a very accessable way to starting building cloud first services. I wanted to see what I could cram in there, so I built a few templates that would let me host a static site. One that is just html, and another than can be built with something like create-react-app. Static Create the template directory: mkdir -p template/static Then add a template/static/template.</description></item><item><title>Bootstrapping a react app</title><link>https://willschenk.com/articles/2019/bootstrapping_a_react_app_with_bootstrap/</link><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2019/bootstrapping_a_react_app_with_bootstrap/</guid><description>&lt;p>Here&amp;rsquo;s a quick recipe for getting a blank react project with bootstrap up and running. We&amp;rsquo;ll walk
though all of the steps that you&amp;rsquo;ll need to get a basic bootstrap based framework up and running,
ready for theming and component implementation using redux.&lt;/p></description></item><item><title>Adding Facebook Login with react</title><link>https://willschenk.com/articles/2018/adding_facebook_login_with_react/</link><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2018/adding_facebook_login_with_react/</guid><description>Sometimes you just can&amp;rsquo;t get away from facebook. Here&amp;rsquo;s a quick tutorial on how to add facebook login to your react app.
First you need to create a facebook app, which is an involved process especially if you want to let, you know, other people log in to your app. Getting your app approved and otherwise up and running here is left as an excersize for you to figure out.</description></item><item><title>Authenticated routes using react-router</title><link>https://willschenk.com/articles/2017/authenticated_routes_using_react_router/</link><pubDate>Tue, 05 Dec 2017 22:19:56 +0000</pubDate><guid>https://willschenk.com/articles/2017/authenticated_routes_using_react_router/</guid><description>&lt;p>Here&amp;rsquo;s a simple walk through on how to use authenticated routes with react-router.&lt;/p></description></item><item><title>Styling and theming with material-ui: React + Material Design</title><link>https://willschenk.com/articles/2017/styling_and_theming_with_material_ui_react__material_design/</link><pubDate>Mon, 04 Dec 2017 19:35:07 +0000</pubDate><guid>https://willschenk.com/articles/2017/styling_and_theming_with_material_ui_react__material_design/</guid><description>We’ve looked at building and styling with rmwc, now lets look a the king of the React Material libraries, Material-UI!
The implementation strategy here is different — instead of including a generated CSS file that applies to all of the elements, each component includes the CSS that it needs in an isolated way. import Button from ‘material-ui/Button’; will include all of the necessary CSS to render that element. This is done with webpack basically.</description></item><item><title>Styling and theming with rmwc: React + Material Design</title><link>https://willschenk.com/articles/2017/styling_and_theming_with_rmwc_react__material_design/</link><pubDate>Wed, 29 Nov 2017 02:11:50 +0000</pubDate><guid>https://willschenk.com/articles/2017/styling_and_theming_with_rmwc_react__material_design/</guid><description>There are a couple of good material design libraries out there, and I’m going to build a basic site with create-react-app to test out how to really make them work. Material design released a new version of their web components, and we’re going to look at a few React libraries that will help us use them.
Material Components For Web These components were written in SASS and JS. There are various ways to customize them and build your design.</description></item><item><title>Building a GUI for managing middleman blogs</title><link>https://willschenk.com/articles/2015/building-a-gui-for-managing-middleman-blogs/</link><pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/building-a-gui-for-managing-middleman-blogs/</guid><description>Can we make static site generators work like a normal site? Lets take a look at how we&amp;rsquo;d start to implement Slow Data and Fast Sites using the example of building an admin UI for a Middleman blog.
TLDR Given a middleman app with middleman-blog and middleman-blog-drafts configured:
Add middleman-blog-ui in your Gemfile. This document describes how middleman-blog-ui works. Add activate :blog_ui in config.rb Start middleman server Visit http://localhost:4567/admin. And now you are living in the fabulous world where you can, from your browser:</description></item></channel></rss>