<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rails on Will Schenk</title><link>https://willschenk.com/tags/rails/</link><description>Recent content in rails on Will Schenk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://willschenk.com/tags/rails/feed.xml" rel="self" type="application/rss+xml"/><item><title>Rails on Kubernetes with TLS</title><link>https://willschenk.com/articles/2021/rails_on_kubernetes_with_tls/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2021/rails_on_kubernetes_with_tls/</guid><description>I wanted to see how to really use kubernetes like I&amp;#39;m used to using heroku, so lets recreate everything using terraform, digital ocean, kubernetes and MAGIC! Sample rails app Build image First thing we&amp;#39;ll do is to create a docker image that we&amp;#39;ll use to build our rails app. Dockerfile.build: FROMruby:3.0.1WORKDIR/app# nodejs and yarn and clocRUN curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -RUN echo &amp;#34;deb https://dl.</description></item><item><title>rails uuid primary key</title><link>https://willschenk.com/articles/2020/rails_uuid_primary_keys/</link><pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/rails_uuid_primary_keys/</guid><description>Exposing primary keys externally just sort of invites people to poke around in your system. Lets configure rails to use uuid instead. Create a postgres rails app We are going to be relying upon the pgcrypto postgres extension, so lets go ahead a create a postgres based rails application. rails new testapp -d=postgresql cd testapp Now we tell our generators that we want our primary key type to be :uuid: # config/initializers/generators.</description></item><item><title>Tailwind and Rails</title><link>https://willschenk.com/articles/2020/tailwind_and_rails/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/tailwind_and_rails/</guid><description>Tailwind is a really nice set of CSS utility classes that let you style up a page staying largely in one file at a time. Rails has it&amp;#39;s own wild way of dealing with javascript, so lets go through how to make them play well together. Install tailwindcss Make sure that you have node 12.13 or higher: node -v If not, then upgrade node. Inside of your rails project, install tailwind.</description></item><item><title>Rails in Docker</title><link>https://willschenk.com/articles/2020/rails_in_docker/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2020/rails_in_docker/</guid><description>In leveraging disposability for exploration we looked at how to build software without having it installed on your local computer. Lets go through how to setup and develop a rails application with this process. docker-compose.yml all the way down We&amp;#39;re going to create our app by adding things to a docker-compose.yml file as needed. Lets create the first one, which will contain our rails container as well as a volume for keeping track of all the gems.</description></item><item><title>Deploying ActionCable on Heroku with Sidekiq</title><link>https://willschenk.com/articles/2016/deploying-actioncable-on-heroku/</link><pubDate>Mon, 11 Jul 2016 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2016/deploying-actioncable-on-heroku/</guid><description>ActionCable is WebSockets on rails. This lets you create realtime, interactive systems, where you can push data from one client to another client without reloading or polling. But how do we deploy it on heroku?
ActionCable is composed to two main parts: a javascript client library, and a backend pub/sub system built upon Redis. We&amp;rsquo;re also going to use ActiveJob to offload the publishing tasks from the main user thread, so we&amp;rsquo;ll also be setting up sidekiq.</description></item><item><title>Using seed to explore APIs</title><link>https://willschenk.com/articles/2015/using-seed-to-explore/</link><pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/using-seed-to-explore/</guid><description>I&amp;rsquo;ve been working to update seed, which is HappyFunCorp&amp;rsquo;s app generator to make it easy to kick off MVPs. Check out the website for more information. One of the things that I&amp;rsquo;ve started to do is to seperate out the dependancies more, and being tutorials on how to use each of the different features. After I link to that stuff, let&amp;rsquo;s walk through a way to combine different techniques we&amp;rsquo;ve discussed together.</description></item><item><title>Bower with Rails</title><link>https://willschenk.com/articles/2015/bower-with-rails/</link><pubDate>Sat, 25 Jul 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/bower-with-rails/</guid><description>Let&amp;rsquo;s look at how we can integrate bower with rails and Sprockets. Bower is one of the two major javascript package managers, the other being the Node Package Manager, or npm. The biggest difference between the two is how the javascript is packaged up. Bower is the more straightforward of the two, and it mainly a way to distribute javascript and keep things up to date.
Install Bower The first step is to install bower.</description></item><item><title>Setting up Rails testing with rspec, devise, and the gang</title><link>https://willschenk.com/articles/2015/setting-up-testing/</link><pubDate>Fri, 23 Jan 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/setting-up-testing/</guid><description>The goal is to get features out fast, and iterate on them quickly. Does anyone care about it? What do they care about? How do we make it better?
As projects get bigger, both in terms of people using the site as well as people working on the site, testing and quality become relatively more important. Adding tests introduces drag, and the theory is that you invest now for payoffs later.</description></item><item><title>Setting up Devise with Twitter and Facebook and other Omniauth schemes without email addresses</title><link>https://willschenk.com/articles/2015/setting-up-devise-with-twitter-and-facebook-and-other-omniauth-schemes-without-email-addresses/</link><pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2015/setting-up-devise-with-twitter-and-facebook-and-other-omniauth-schemes-without-email-addresses/</guid><description>Adding social login to your sites really makes it easier to get users onboard. Devise is great to help get an authentication system up and running, but there are a few tricky things to get right. The first challenge is that you don&amp;rsquo;t always get the user&amp;rsquo;s email address when the first connect. The second challenge is that we want to request the minimum permissions first so that the user is more likely to sign up, and gradually ask more as the time arises.</description></item><item><title>Dateslice: Writing rails extensions</title><link>https://willschenk.com/articles/2014/dateslice-writing-rails-extensions/</link><pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate><guid>https://willschenk.com/articles/2014/dateslice-writing-rails-extensions/</guid><description>Ruby on Rails is a very modular framework since the merging with Merb in 2008. The opinionated conventions are implemented under using techniques that let you jump in and build your own components, picking and choosing different parts that let you build Rails apps in the same straightforward way you would if using the official modules.
Let&amp;rsquo;s go through the dateslices gem which I wrote to extend active record so that we could better interact with the group by sql command when dealing with dates.</description></item></channel></rss>