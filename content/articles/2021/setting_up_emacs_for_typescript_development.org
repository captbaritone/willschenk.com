#+title: Setting up emacs for typescript development
#+subtitle: If we are going to bother with static types, might as well use them
#+tags: emacs, typescript
#+date: 2021-03-06
#+draft: true

* Prerecs

Emacs with nativejson support:

#+begin_src elisp
    (if (functionp 'json-serialize)
        (message "Native JSON is available")
        (message "Native JSON is *not* available"))
#+end_src

#+RESULTS:
: Native JSON is available

Node > 0.12.0
#+begin_src bash
node - v
#+end_src

#+RESULTS:

* Installing tide

#+begin_src elisp
  (use-package tide :ensure t)
  (use-package company :ensure t)
  (use-package flycheck :ensure t)

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)

#+end_src

# + RESULTS:
| setup - tide - mode |

    And also tell it about = tsx = files:

# + begin_src elisp
    (require 'web-mode)
        (add - to - list 'auto-mode-alist '("\\.tsx\\'".web - mode))
        (add - hook 'web-mode-hook
            (lambda()
                (when(string - equal "tsx"(file - name - extension buffer - file - name))
                    (setup - tide - mode))))
;; enable typescript - tslint checker
    (flycheck - add - mode 'typescript-tslint 'web - mode)
# + end_src

# + RESULTS:
| web - mode | typescript - mode |

* Creating a sample project

Lets create a sample project
# + begin_src bash
cd $(mktemp - d)
npm init - y
npm install--save - dev typescript - deno - plugin typescript
# + end_src

And then create a = tsconfig.json = file which tells typescript about
    = deno =:

# + begin_src json
{
    "compilerOptions": {
        "plugins": [
            {
                "name": "typescript-deno-plugin",
                "enable": true, // default is `true`
                "importmap": "import_map.json"
            }
        ]
    }
}
# + end_src

Lets create a = test.tsx =

# + begin_src tsx
console.log("Welcome to deno!")

const url = Deno.args[0];
const res = await fetch(url);

const body = new Uint8Array(await res.arrayBuffer());
await Deno.stdout.write(body);
# + end_src

And put your cursor over = Deno = and press = M -.= to navigate to the
definition.


* References

1. https://github.com/ananthakumaran/tide
2. https://deno.land/manual@v1.8.0/getting_started/setup_your_environment#emacs
