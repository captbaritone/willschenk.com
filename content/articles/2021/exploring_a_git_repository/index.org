#+title: Exploring a git repository
#+date: 2021-03-24
#+draft: true

* Dockerfile

#+begin_src Dockerfile :tangle Dockerfile
#FROM debian:10.8
FROM ruby:3.0.0

#RUN apt update && apt install -y git

WORKDIR /app

COPY *.rb *sh ./
RUN chmod +x *.sh *rb
#ENTRYPOINT ["/app/entry_point.sh"]

CMD bash
#+end_src

#+begin_src bash :tangle gitinfo
  export REPO=https://github.com/ruby-git/ruby-git
  mkdir -p output
  docker build . -t wschenk/gitinfo && \
      docker run --rm -it \
             -v $PWD/output:/output \
             --env REPO=$REPO \
             wschenk/gitinfo
#+end_src

#             -v $PWD:/app \

* Script

1. Checkout the repostory
2. Create the work directory
3. Run the scripts
   
#+begin_src bash :tangle entry_point.sh
  #!/bin/bash
  REPO_WORK_DIR=/repository
  WORK_DIR=/output

  if [ -d ${REPO_WORK_DIR} ]; then
     echo Using repo in ${REPO_WORK_DIR}
  else
      if [ -z "$REPO" ]; then
          echo Please set the REPO env variable or mount ${REPO_WORK_DIR}
          exit 1
      fi

      git clone $REPO ${REPO_WORK_DIR}
  fi

  if [ ! -d ${WORK_DIR} ]; then
      echo Creating ${WORK_DIR}
      mkdir -p ${WORK_DIR}
  fi


  # Create a log of commits
  (cd ${REPO_WORK_DIR};git log --reverse --pretty='format:%aI|%ae|%an|%D') | sort > ${WORK_DIR}/commits.log

  # Create a list of authors

  (cd ${REPO_WORK_DIR};git log --pretty=format:"%ae:%an") | sort -u > ${WORK_DIR}/author.log


  cd ${WORK_DIR}

  for i in /app/*rb; do
      ruby $i
  done
#+end_src

* Authors
* Monthly commits

#+begin_src ruby :tangle monthly_commits.rb
  require 'csv'
  require 'json'
  require 'date'

  count = 0
  last_month = nil
  people = {}

  CSV.open( ARGV[1] || "monthly_commits.csv", "w" ) do |csv|
    csv << ['date', 'commits', 'authors', 'authors_json' ]

    File.readlines( ARGV[0] || "commits.log" ).each do |line|
      date, email, name = line.split( "|" )
      month = date.gsub( /-\d\dT.*/, "" ).chomp

      if month != last_month && last_month
        csv << [last_month, count, people.length, people.to_json]

        count = 0
        people = {}

        lc = 0
      
        # Fill in the missing months with zeros
        next_month = (Date.parse( "#{last_month}-01" ) >> 1).strftime( "%Y-%m" )
        while next_month != month
          csv << [next_month, 0, 0, {}.to_json]
          next_month = (Date.parse( "#{next_month}-01" ) >> 1).strftime( "%Y-%m" )
          lc += 1
          continue if lc > 24 # after 2 years this is probably broken
        end
      end

      people[name] ||= 0
      people[name] += 1

      count += 1
      last_month = month
    end

    csv << [last_month, count, people.length, people.to_json]
  end
#+end_src

#+begin_src ruby
require 'csv'
require 'date'
require 'json'

count = 0
last_month = nil
people = {}

CSV.open( ARGV[1] || "monthly_commits_show_blanks.csv", "w" ) do |csv|
  csv << ['date', 'commits', 'authors', 'authors_json' ]

  File.readlines( ARGV[0] || "commits.log" ).each do |line|
    date, email, name = line.split( "|" )
    month = date.gsub( /-\d\dT.*/, "" ).chomp;
    if( month != last_month && last_month )
      csv << [last_month, count, people.length, people.to_json]

      count = 0
      people = {}
      
      lc = 0
      
      # Fill in the missing months with zeros
      next_month = (Date.parse( "#{last_month}-01" ) >> 1).strftime( "%Y-%m" )
      while next_month != month
        csv << [next_month, 0, 0, {}.to_json]
        next_month = (Date.parse( "#{next_month}-01" ) >> 1).strftime( "%Y-%m" )
        lc += 1
        continue if lc > 24 # after 2 years this is probably broken
      end
    end
    
    people[name] ||= 0
    people[name] += 1
    
    count += 1
    last_month = month
  end
  
  csv << [ last_month, count, people.length, people.to_json ]
end


#+end_src
* Project Timeline

#+begin_src ruby :tangle project_timeline.rb
  require 'csv'
  require 'date'
  require 'json'

  CONTRIBUTOR_ACTIVE_MONTHS = 3
  PROJECT_IDLE_MONTHS = 6

  author_last_seen = {}
  author_commits = {}
  period_commits = 0
  period_authors = {}
  period_author_first_seen = {}
  tag_authors = {}
  csv = []

  last_date = nil
  File.readlines( ARGV[0] || "commits.log" ).each do |line|
    date_string, email, name, decorator = line.split( "|" )
    date = Date.parse( date_string )
  
    csv << [date, 'project', 'project_started', ''] if last_date.nil?
  
    if last_date && Date.parse(last_date) >> PROJECT_IDLE_MONTHS < date
      csv << [Date.parse(last_date) >> PROJECT_IDLE_MONTHS, 'project', 'project_idle', period_authors.to_json, period_commits]
      csv << [date, 'project', 'project_active', '']
      period_commits = 0
      period_authors = {}
    end
  
    csv << [date, 'committer', 'started_contributing', name] if !author_last_seen[name]
    author_last_seen[name] = date
    author_commits[name] ||= 0
    author_commits[name] += 1
    period_authors[name] ||=0
    period_authors[name] += 1
    period_author_first_seen[name] ||= date
    tag_authors[name] ||= 0
    tag_authors[name] += 1
  
    left_authors = []
    author_last_seen.each do |author,last_seen|
      if last_seen >> CONTRIBUTOR_ACTIVE_MONTHS < date
        left_authors << author
        csv << [last_seen >> CONTRIBUTOR_ACTIVE_MONTHS, 'committer', 'left_project', author, author_commits[author]]
        csv << [period_author_first_seen[author], 'committer', 'activity_between', author, author_last_seen[author], author_commits[author]]
        author_commits.delete author
        period_author_first_seen.delete author
      end
    end
    left_authors.each { |author| author_last_seen.delete( author ) }

    # Add tagging event
    if decorator =~ /tag: (.*)/
      csv << [date, 'project', 'tag', $1, name, tag_authors.to_json]
      tag_authors = {}
    end
  
    last_date = date_string
    period_commits += 1
  end

  # Dump out remaining active people

  period_author_first_seen.each do |author,first_seen|
    csv << [first_seen, 'committer', 'activity_between', author, author_last_seen[author], author_commits[author]]
  end

  csv << [Date.parse(last_date), 'project', 'last_data', author_commits.to_json, period_commits]

  CSV.open( ARGV[1] || "project_timeline.csv", "w" ) do |out|
    out << ['date','actor', 'action', 'data', 'commits']

    csv.sort { |a,b| a[0] <=> b[0] }.each { |x| out << x }
  end

#+end_src
* Tags
* References
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
