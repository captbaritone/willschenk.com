#+title: Emacs Blogging Mode
#+subtitle: emacs and hugo sitting in a tree
#+draft: true
#+tags: emacs, hugo, elisp
#+date: 2021-03-15

#+begin_src elisp :tangle blog.el
  ;; set the directory
  (setq blog-mode-base-dir "/home/wschenk/willschenk.com/content/articles")
  (require 'transient)
#+end_src

#+RESULTS:
: transient

#+begin_src elisp :tangle blog.el
  (defun blog-mode-file-peek (pattern file)
    (let ((result (car (process-lines "awk" "-F: " (concat pattern " {print $2}") file))))
      (if result
          (replace-regexp-in-string "\"" "" result)
        "")))
#+end_src

#+RESULTS:
: blog-mode-file-peek

#+begin_src elisp :tangle blog.el
  (defun blog-mode-parse-org (file)
    (let ((title (blog-mode-file-peek "/\\+title/" file))
          (date (blog-mode-file-peek "/\\+date/" file))
          (draft (blog-mode-file-peek "/\\+draft/" file))
          (tags (blog-mode-file-peek "/\\+tags/" file)))
    
      (list file (vector title draft date tags))))

#+end_src

#+begin_src elisp
  ;; parse an org-file
  (setq org-test "/home/wschenk/willschenk.com/content/articles/2021/setting_up_emacs_for_typescript_development.org")

  (blog-mode-parse-org org-test)
#+end_src

#+RESULTS:
| /home/wschenk/willschenk.com/content/articles/2021/setting_up_emacs_for_typescript_development.org | [Setting up emacs for typescript development true 2021-03-06 emacs, typescript] |

#+begin_src elisp :tangle blog.el

  (defun blog-mode-parse-md (file)
    (let ((title (blog-mode-file-peek "/^title/" file))
          (date (blog-mode-file-peek "/^date/" file))
          (draft (blog-mode-file-peek "/^draft/" file))
          (tags (blog-mode-file-peek "/^tags/" file)))
      (list file (vector title draft date tags))))

#+end_src

#+begin_src elisp
  (setq md-test "/home/wschenk/willschenk.com/content/articles/2020/styling_tables_with_hugo.md")

  (blog-mode-parse-md md-test)

#+end_src

#+RESULTS:
| /home/wschenk/willschenk.com/content/articles/2020/styling_tables_with_hugo.md | [Styling tables with Hugo  "2020-03-02" ] |

#+begin_src elisp :tangle blog.el
  (defun blog-mode-parse-directory (directory)
    (let ((md (concat directory "/index.md"))
          (org (concat directory "/index.org")))
      (if (file-exists-p md)
        (blog-mode-parse-md md)
        (if (file-exists-p org)
          (blog-mode-parse-org org)
          nil))))

#+end_src

#+begin_src elisp
  ;; What can we figure out from a directory
  (setq dir-test "/home/wschenk/willschenk.com/content/articles/2021/gist_in_emacs")

  (blog-mode-parse-directory dir-test)
#+end_src
#+RESULTS:
| /home/wschenk/willschenk.com/content/articles/2021/gist_in_emacs/index.org | [gist in emacs true 2021-03-09 emacs, github, gists] |

#+begin_src elisp :tangle blog.el
  (defun blog-mode-parse (file)
    (if (file-directory-p file)
        (blog-mode-parse-directory file)
      (let ((ex (file-name-extension file)))
        (if (string= ex "md")
            (blog-mode-parse-md file)
          (if (string= ex "org")
              (blog-mode-parse-org file)
            (message (concat "Unknown extension " ex)))))))
#+end_src

#+begin_src elisp
  (blog-mode-parse org-test)  
#+end_src

#+RESULTS:
| /home/wschenk/willschenk.com/content/articles/2021/setting_up_emacs_for_typescript_development.org | [Setting up emacs for typescript development true 2021-03-06 emacs, typescript] |

#+begin_src elisp :tangle blog.el
  (defun blog-mode-refresh-data ()
    (setq blog-mode-entries nil)
    (dolist (file (process-lines "find" blog-mode-base-dir  "-maxdepth" "2" "-print"))
      (let ((entry (blog-mode-parse file)))
        (if entry
            (push (blog-mode-parse file) blog-mode-entries)))))
#+end_src

#+begin_src elisp

  (blog-mode-refresh-data)
#+end_src

#+RESULTS:

Set up the mode

#+begin_src elisp :tangle blog.el
  (define-derived-mode blog-mode tabulated-list-mode "blog-mode" "Major mode Blog Mode, to edit hugo blogs"
    (setq tabulated-list-format [("Title" 60 t)
                                 ("Draft" 5 nil)
                                 ("Date"  11 t)
                                 ("Tags" 0 nil)])
    (setq tabulated-list-padding 2)
    (setq tabulated-list-sort-key (cons "Date" t))
    (use-local-map blog-mode-map)
    (tabulated-list-init-header))

  (defun blog-list ()
    (interactive)
    (pop-to-buffer "*Blog Mode*" nil)
    (blog-mode)
    (blog-mode-refresh-data)
    (setq tabulated-list-entries (-non-nil blog-mode-entries))
    (tabulated-list-print t))
#+end_src

#+RESULTS:
: blog-list

#+begin_src elisp :tangle blog.el
  (defvar blog-mode-map nil "keymap for blog-mode")

  (setq blog-mode-map (make-sparse-keymap))

  (define-key blog-mode-map (kbd "?") 'blog-mode-help)
  (define-key blog-mode-map (kbd "o") 'blog-mode-open)
  (define-key blog-mode-map (kbd "<return>") 'blog-mode-open)
  (define-key blog-mode-map (kbd "d") 'blog-mode-drafts)
  (define-key blog-mode-map (kbd "a") 'blog-mode-all)
  (define-key blog-mode-map (kbd "p") 'blog-mode-published)
  (define-key blog-mode-map (kbd "r") 'blog-mode-refresh-all)
  (define-key blog-mode-map (kbd "c") 'blog-mode-make-draft)
  (define-key blog-mode-map (kbd "RET") 'blog-mode-open)

  (transient-define-prefix blog-mode-help ()
    "Help transient for blog mode."
    ["Blog mode help"
     ("o" "Open" blog-mode-open)
     ("d" "Drafts" blog-mode-drafts)
     ("a" "All" blog-mode-all)
     ("p" "Published" blog-mode-published)
     ("r" "Refresh" blog-mode-refresh-all)
     ("c" "Create post" blog-mode-make-draft)
     ])

  (defun blog-mode-open ()
    (interactive)
    (find-file (tabulated-list-get-id)))
#+end_src

#+RESULTS:
: blog-mode-open

#+begin_src elisp :tangle blog.el
  (defun blog-mode-refresh-all ()
    (interactive)
    (progn
      (blog-mode-refresh-data)
      (setq tabulated-list-entries (-non-nil blog-mode-entries))
      (tabulated-list-print t)))

  (defun blog-mode-all () 
    (interactive)
    (progn
      (setq tabulated-list-entries (-non-nil blog-mode-entries))
      (tabulated-list-print t)))

  (defun blog-mode-drafts () 
    (interactive)
    (progn
      (setq tabulated-list-entries 
            (-filter (lambda (x)
                       (string= "true"
                                (aref (car (cdr x)) 1))) (-non-nil blog-mode-entries)))
      (tabulated-list-print t)))

  (defun blog-mode-published () 
    (interactive)
    (progn
      (setq tabulated-list-entries 
            (-filter (lambda (x)
                       (string= ""
                                (aref (car (cdr x)) 1))) blog-mode-entries)))
      (tabulated-list-print t))
#+end_src

#+RESULTS:
: blog-mode-published

#+begin_src elisp :tangle blog.el
  (defun string-title-to-filename (str)
    "FooBar => foo_bar"
    (let ((case-fold-search nil))
      (setq str (replace-regexp-in-string "\\([a-z0-9]\\)\\([A-Z]\\)" "\\1_\\2" str))
      (setq str (replace-regexp-in-string "\\([A-Z]+\\)\\([A-Z][a-z]\\)" "\\1_\\2" str))
      (setq str (replace-regexp-in-string "-" "_" str)) ; FOO-BAR => FOO_BAR
      (setq str (replace-regexp-in-string "_+" "_" str))
      (setq str (replace-regexp-in-string " " "_" str))
      (downcase str)))

  (defun blog-mode-make-draft ()
    "Little function to create a org file inside of the blog"
    (interactive)
    (let* (
           (mini (yes-or-no-p "Mini post? "))
           (title (read-from-minibuffer "Title: "))
           (year (format-time-string "%Y"))
           (filename (string-title-to-filename title))
           (rootpath (concat blog-mode-base-dir "/" year "/" filename))
           (path (if mini (concat rootpath ".org") (concat rootpath "/index.org")))
           )
      (set-buffer (find-file path))
      (insert "#+title: " title "\n")
      (insert "#+date: " (format-time-string "%Y-%m-%d") "\n")
      (insert "#+draft: true\n")
      (unless mini
        (insert "\n* References\n# Local Variables:\n# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)\n# End:\n"))
      )
    )

#+end_src

#+RESULTS:
: blog-mode-make-draft

#+begin_src elisp :tangle blog.el
(global-set-key (kbd "C-c d") 'blog-list)

#+end_src

#+RESULTS:
: blog-list

* References

1. https://pagefault.se/post/lets-build-docker-mode-part-1/
2. https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html#File-Name-Components
3. http://lgmoneda.github.io/2017/03/15/elisp-summary.html#loops
4. http://ergoemacs.org/emacs/elisp_vector.html
5. https://stackoverflow.com/questions/2234860/lisp-filter-out-results-from-list-not-matching-predicate
   
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
